[
  {
    "id": "git_remotes",
    "text": "git version 2.49.0.windows.1",
    "metadata": {
      "type": "git-meta",
      "section": "remotes"
    }
  },
  {
    "id": "git_branches",
    "text": "usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--no-lazy-fetch]\n           [--no-optional-locks] [--no-advice] [--bare] [--git-dir=<path>]\n           [--work-tree=<path>] [--namespace=<name>] [--config-env=<name>=<envvar>]\n           <command> [<args>]\n\nThese are common Git commands used in various situations:\n\nstart a working area (see also: git help tutorial)\n   clone      Clone a repository into a new directory\n   init       Create an empty Git repository or reinitialize an existing one\n\nwork on the current change (see also: git help everyday)\n   add        Add file contents to the index\n   mv         Move or rename a file, a directory, or a symlink\n   restore    Restore working tree files\n   rm         Remove files from the working tree and from the index\n\nexamine the history and state (see also: git help revisions)\n   bisect     Use binary search to find the commit that introduced a bug\n   diff       Show changes between commits, commit and working tree, etc\n   grep       Print lines matching a pattern\n   log        Show commit logs\n   show       Show various types of objects\n   status     Show the working tree status\n\ngrow, mark and tweak your common history\n   backfill   Download missing objects in a partial clone\n   branch     List, create, or delete branches\n   commit     Record changes to the repository\n   merge      Join two or more development histories together\n   rebase     Reapply commits on top of another base tip\n   reset      Reset current HEAD to the specified state\n   switch     Switch branches\n   tag        Create, list, delete or verify a tag object signed with GPG\n\ncollaborate (see also: git help workflows)\n   fetch      Download objects and refs from another repository\n   pull       Fetch from and integrate with another repository or a local branch\n   push       Update remote refs along with associated objects\n\n'git help -a' and 'git help -g' list available subcommands and some\nconcept guides. See 'git help <command>' or 'git help <concept>'\nto read about a specific subcommand or concept.\nSee 'git help git' for an overview of the system.",
    "metadata": {
      "type": "git-meta",
      "section": "branches"
    }
  },
  {
    "id": "git_status",
    "text": "usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--no-lazy-fetch]\n           [--no-optional-locks] [--no-advice] [--bare] [--git-dir=<path>]\n           [--work-tree=<path>] [--namespace=<name>] [--config-env=<name>=<envvar>]\n           <command> [<args>]\n\nThese are common Git commands used in various situations:\n\nstart a working area (see also: git help tutorial)\n   clone      Clone a repository into a new directory\n   init       Create an empty Git repository or reinitialize an existing one\n\nwork on the current change (see also: git help everyday)\n   add        Add file contents to the index\n   mv         Move or rename a file, a directory, or a symlink\n   restore    Restore working tree files\n   rm         Remove files from the working tree and from the index\n\nexamine the history and state (see also: git help revisions)\n   bisect     Use binary search to find the commit that introduced a bug\n   diff       Show changes between commits, commit and working tree, etc\n   grep       Print lines matching a pattern\n   log        Show commit logs\n   show       Show various types of objects\n   status     Show the working tree status\n\ngrow, mark and tweak your common history\n   backfill   Download missing objects in a partial clone\n   branch     List, create, or delete branches\n   commit     Record changes to the repository\n   merge      Join two or more development histories together\n   rebase     Reapply commits on top of another base tip\n   reset      Reset current HEAD to the specified state\n   switch     Switch branches\n   tag        Create, list, delete or verify a tag object signed with GPG\n\ncollaborate (see also: git help workflows)\n   fetch      Download objects and refs from another repository\n   pull       Fetch from and integrate with another repository or a local branch\n   push       Update remote refs along with associated objects\n\n'git help -a' and 'git help -g' list available subcommands and some\nconcept guides. See 'git help <command>' or 'git help <concept>'\nto read about a specific subcommand or concept.\nSee 'git help git' for an overview of the system.",
    "metadata": {
      "type": "git-meta",
      "section": "status"
    }
  },
  {
    "id": "git_config",
    "text": "unknown option: --list\nusage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--no-lazy-fetch]\n           [--no-optional-locks] [--no-advice] [--bare] [--git-dir=<path>]\n           [--work-tree=<path>] [--namespace=<name>] [--config-env=<name>=<envvar>]\n           <command> [<args>]",
    "metadata": {
      "type": "git-meta",
      "section": "config"
    }
  },
  {
    "id": "git_log",
    "text": "- [           [-p ]  --no-pager] [--no-replace-objects] [--no-lazy-fetch] by  --paginate  on  -P ",
    "metadata": {
      "type": "git-meta",
      "section": "log"
    }
  },
  {
    "id": "git_committers",
    "text": "",
    "metadata": {
      "type": "git-meta",
      "section": "committers"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_calculateContractsps1",
    "text": ". \"classes\\contract.ps1\"\r\n. \"functions\\bankholidays.ps1\"\r\n\r\n# Check if the execution directory is the script directory\r\nif ($PSScriptRoot -ne (Get-Location)) {\r\n    Write-Error \"The execution directory is not the script directory. Please change to the script directory. $PSScriptRoot\"\r\n    Exit 1\r\n}\r\n\r\n# Check for PowerShell version 7 or higher\r\nif ($PSVersionTable.PSVersion.Major -lt 7) {\r\n    Write-Error \"This script requires PowerShell 7 or higher. Please upgrade your PowerShell version.\"\r\n    Exit 1\r\n}\r\n\r\n# Load the combined object from the JSON file\r\n$contract = [Contract]::LoadFromFile(\"config/Contract.json\")\r\n$contractResult = $contract.Calculate()\r\n\r\n# loop throug contractresult to find the highest and lowewst month\r\n$highestMonth = $contractResult | Sort-Object -Property TotalCost -Descending | Select-Object -First 1\r\n$lowestMonth = $contractResult | Sort-Object -Property TotalCost | Select-Object -First 1\r\n\r\nWrite-Output \"Highest month: $($highestMonth.Month) - TotalCost: €$($highestMonth.TotalCost)\"\r\nWrite-Output \"Lowest month: $($lowestMonth.Month) - TotalCost: €$($lowestMonth.TotalCost)\"\r\n\r\nWrite-Output \"Contract loaded: $($contract.FirstName) $($contract.LastName) - Year: $($contract.Year)\"\r\nWrite-Output \"Morning cost per hour: €$($contract.MorningCostPerHour) - Morning subsidy per hour: €$($contract.MorningGovSubsidyPerHour)\"\r\n\r\n# Output the workdays per month\r\nWrite-Output \"Workdays per month:\"\r\n$contractResult | ForEach-Object {\r\n    Write-Output (\"Month: {0} - Count: {1} - TotalCost: €{2:F2} - TotalSubsidy: €{3:F2}\" -f $_.Month, $_.Days, $_.TotalCost, $_.TotalSubsidy)\r\n}\r\n\r\n# Save the workdays per month to a JSON file\r\n$contractResult | ConvertTo-Json | Set-Content -Path \"data/contractResult.json\"",
    "metadata": {
      "extension": "ps1",
      "type": "code",
      "path": "C:/repos/danielsiegl/powershellplayground/calculateContractsps1"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_Export-GitRepoInfoJsonps1",
    "text": "param (\r\n    [string]$RepoPath = \".\",\r\n    [string]$OutputFile = \"./git_repo_docs.json\",\r\n    [int]$CommitLimit = 50\r\n)\r\n\r\n# Helper functions\r\nfunction Run-Git { param($args) ; git -C $RepoPath @args 2>&1 }\r\nfunction Normalize-Path { param($p); return $p.Replace($RepoPath, \"\").Replace(\"\\\", \"/\").TrimStart(\"/\") }\r\nfunction Make-Doc { param($id, $text, $meta); return [pscustomobject]@{ id = $id; text = $text; metadata = $meta } }\r\n\r\n# Validate repo\r\nif (-not (Test-Path \"$RepoPath/.git\")) {\r\n    Write-Error \"Not a Git repo.\"\r\n    exit 1\r\n}\r\n\r\n$docs = @()\r\n\r\n# 🧠 1. Git metadata\r\n$docs += Make-Doc \"git_remotes\" ((Run-Git \"remote\" \"-v\") -join \"`n\") @{ type = \"git-meta\"; section = \"remotes\" }\r\n$docs += Make-Doc \"git_branches\" ((Run-Git \"branch\") -join \"`n\") @{ type = \"git-meta\"; section = \"branches\" }\r\n$docs += Make-Doc \"git_status\" ((Run-Git \"status\") -join \"`n\") @{ type = \"git-meta\"; section = \"status\" }\r\n$docs += Make-Doc \"git_config\" ((Run-Git \"config\" \"--list\") -join \"`n\") @{ type = \"git-meta\"; section = \"config\" }\r\n\r\n# 🧠 2. Git log summary\r\n$logLines = Run-Git \"log\" \"-n\" $CommitLimit \"--pretty=format:%h|%an|%ad|%s\" \"--date=iso\"\r\n$logFormatted = @()\r\nforeach ($line in $logLines) {\r\n    $parts = $line -split \"\\|\", 4\r\n    if ($parts.Count -eq 4) {\r\n        $logFormatted += \"- [$($parts[0])] $($parts[3]) by $($parts[1]) on $($parts[2])\"\r\n    }\r\n}\r\n$docs += Make-Doc \"git_log\" ($logFormatted -join \"`n\") @{ type = \"git-meta\"; section = \"log\" }\r\n\r\n# 🧠 2b. Committers summary\r\n$committerRaw = Run-Git \"shortlog\" \"-sne\"\r\n$committerLines = @()\r\nforeach ($line in $committerRaw) {\r\n    if ($line -match '^\\s*(\\d+)\\s+(.+)\\s+<(.+)>$') {\r\n        $count = $matches[1]\r\n        $name = $matches[2]\r\n        $email = $matches[3]\r\n        $committerLines += \"$count commits – $name <$email>\"\r\n    }\r\n}\r\n$docs += Make-Doc \"git_committers\" ($committerLines -join \"`n\") @{ type = \"git-meta\"; section = \"committers\" }\r\n\r\n# 🧠 3. File content extraction\r\n$files = Get-ChildItem -Path $RepoPath -Recurse -File\r\nforeach ($file in $files) {\r\n    $relPath = Normalize-Path $file.FullName\r\n    $ext = [IO.Path]::GetExtension($file.Name).TrimStart(\".\").ToLower()\r\n    $type = switch ($ext) {\r\n        \"md\" { \"doc\" }\r\n        \"rst\" { \"doc\" }\r\n        \"ps1\" { \"code\" }\r\n        \"py\"  { \"code\" }\r\n        \"js\"  { \"code\" }\r\n        \"ts\"  { \"code\" }\r\n        \"sh\"  { \"code\" }\r\n        \"java\" { \"code\" }\r\n        \"cs\" { \"code\" }\r\n        \"cpp\" { \"code\" }\r\n        \"rb\"  { \"code\" }\r\n        \"json\" { \"config\" }\r\n        default { \"other\" }\r\n    }\r\n\r\n    try {\r\n        $text = Get-Content $file.FullName -Raw -ErrorAction Stop\r\n        if ($text.Length -gt 0) {\r\n            $safeId = $relPath.Replace(\"/\", \"_\").Replace(\".\", \"_\")\r\n            $docs += Make-Doc \"file_$safeId\" $text @{ type = $type; path = $relPath; extension = $ext }\r\n        }\r\n    } catch {\r\n        Write-Warning \"⚠️ Could not read: $relPath\"\r\n    }\r\n}\r\n\r\n# 🧠 4. Export to JSON\r\n$docs | ConvertTo-Json -Depth 10 | Set-Content -Encoding UTF8 -Path $OutputFile\r\nWrite-Host \"`n✅ Repo exported to RAG-friendly JSON at: $OutputFile\"\r\n",
    "metadata": {
      "extension": "ps1",
      "type": "code",
      "path": "C:/repos/danielsiegl/powershellplayground/Export-GitRepoInfoJsonps1"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_git_repo_docsjson",
    "text": "[\r\n  {\r\n    \"id\": \"git_remotes\",\r\n    \"text\": \"git version 2.49.0.windows.1\",\r\n    \"metadata\": {\r\n      \"type\": \"git-meta\",\r\n      \"section\": \"remotes\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": \"git_branches\",\r\n    \"text\": \"unknown option: -a\\nusage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]\\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--no-lazy-fetch]\\n           [--no-optional-locks] [--no-advice] [--bare] [--git-dir=<path>]\\n           [--work-tree=<path>] [--namespace=<name>] [--config-env=<name>=<envvar>]\\n           <command> [<args>]\",\r\n    \"metadata\": {\r\n      \"type\": \"git-meta\",\r\n      \"section\": \"branches\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": \"git_status\",\r\n    \"text\": \"usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]\\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--no-lazy-fetch]\\n           [--no-optional-locks] [--no-advice] [--bare] [--git-dir=<path>]\\n           [--work-tree=<path>] [--namespace=<name>] [--config-env=<name>=<envvar>]\\n           <command> [<args>]\\n\\nThese are common Git commands used in various situations:\\n\\nstart a working area (see also: git help tutorial)\\n   clone      Clone a repository into a new directory\\n   init       Create an empty Git repository or reinitialize an existing one\\n\\nwork on the current change (see also: git help everyday)\\n   add        Add file contents to the index\\n   mv         Move or rename a file, a directory, or a symlink\\n   restore    Restore working tree files\\n   rm         Remove files from the working tree and from the index\\n\\nexamine the history and state (see also: git help revisions)\\n   bisect     Use binary search to find the commit that introduced a bug\\n   diff       Show changes between commits, commit and working tree, etc\\n   grep       Print lines matching a pattern\\n   log        Show commit logs\\n   show       Show various types of objects\\n   status     Show the working tree status\\n\\ngrow, mark and tweak your common history\\n   backfill   Download missing objects in a partial clone\\n   branch     List, create, or delete branches\\n   commit     Record changes to the repository\\n   merge      Join two or more development histories together\\n   rebase     Reapply commits on top of another base tip\\n   reset      Reset current HEAD to the specified state\\n   switch     Switch branches\\n   tag        Create, list, delete or verify a tag object signed with GPG\\n\\ncollaborate (see also: git help workflows)\\n   fetch      Download objects and refs from another repository\\n   pull       Fetch from and integrate with another repository or a local branch\\n   push       Update remote refs along with associated objects\\n\\n'git help -a' and 'git help -g' list available subcommands and some\\nconcept guides. See 'git help <command>' or 'git help <concept>'\\nto read about a specific subcommand or concept.\\nSee 'git help git' for an overview of the system.\",\r\n    \"metadata\": {\r\n      \"type\": \"git-meta\",\r\n      \"section\": \"status\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": \"git_config\",\r\n    \"text\": \"unknown option: --list\\nusage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]\\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--no-lazy-fetch]\\n           [--no-optional-locks] [--no-advice] [--bare] [--git-dir=<path>]\\n           [--work-tree=<path>] [--namespace=<name>] [--config-env=<name>=<envvar>]\\n           <command> [<args>]\",\r\n    \"metadata\": {\r\n      \"type\": \"git-meta\",\r\n      \"section\": \"config\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": \"git_log\",\r\n    \"text\": \"- [unknown option: -n]  by  on \\n- [usage: git [-v ]  by  --version] [-h  on  --help] [-C <path>] [-c <name>=<value>]\\n- [           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]]  by  on \\n- [           [-p ]  --no-pager] [--no-replace-objects] [--no-lazy-fetch] by  --paginate  on  -P \\n- [           [--no-optional-locks] [--no-advice] [--bare] [--git-dir=<path>]]  by  on \\n- [           [--work-tree=<path>] [--namespace=<name>] [--config-env=<name>=<envvar>]]  by  on \\n- [           <command> [<args>]]  by  on \",\r\n    \"metadata\": {\r\n      \"type\": \"git-meta\",\r\n      \"section\": \"log\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": \"git_committers\",\r\n    \"text\": null,\r\n    \"metadata\": {\r\n      \"type\": \"git-meta\",\r\n      \"section\": \"committers\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_calculateContractsps1\",\r\n      \". \\\"classes\\\\contract.ps1\\\"\\r\\n. \\\"functions\\\\bankholidays.ps1\\\"\\r\\n\\r\\n# Check if the execution directory is the script directory\\r\\nif ($PSScriptRoot -ne (Get-Location)) {\\r\\n    Write-Error \\\"The execution directory is not the script directory. Please change to the script directory. $PSScriptRoot\\\"\\r\\n    Exit 1\\r\\n}\\r\\n\\r\\n# Check for PowerShell version 7 or higher\\r\\nif ($PSVersionTable.PSVersion.Major -lt 7) {\\r\\n    Write-Error \\\"This script requires PowerShell 7 or higher. Please upgrade your PowerShell version.\\\"\\r\\n    Exit 1\\r\\n}\\r\\n\\r\\n# Load the combined object from the JSON file\\r\\n$contract = [Contract]::LoadFromFile(\\\"config/Contract.json\\\")\\r\\n$contractResult = $contract.Calculate()\\r\\n\\r\\n# loop throug contractresult to find the highest and lowewst month\\r\\n$highestMonth = $contractResult | Sort-Object -Property TotalCost -Descending | Select-Object -First 1\\r\\n$lowestMonth = $contractResult | Sort-Object -Property TotalCost | Select-Object -First 1\\r\\n\\r\\nWrite-Output \\\"Highest month: $($highestMonth.Month) - TotalCost: €$($highestMonth.TotalCost)\\\"\\r\\nWrite-Output \\\"Lowest month: $($lowestMonth.Month) - TotalCost: €$($lowestMonth.TotalCost)\\\"\\r\\n\\r\\nWrite-Output \\\"Contract loaded: $($contract.FirstName) $($contract.LastName) - Year: $($contract.Year)\\\"\\r\\nWrite-Output \\\"Morning cost per hour: €$($contract.MorningCostPerHour) - Morning subsidy per hour: €$($contract.MorningGovSubsidyPerHour)\\\"\\r\\n\\r\\n# Output the workdays per month\\r\\nWrite-Output \\\"Workdays per month:\\\"\\r\\n$contractResult | ForEach-Object {\\r\\n    Write-Output (\\\"Month: {0} - Count: {1} - TotalCost: €{2:F2} - TotalSubsidy: €{3:F2}\\\" -f $_.Month, $_.Days, $_.TotalCost, $_.TotalSubsidy)\\r\\n}\\r\\n\\r\\n# Save the workdays per month to a JSON file\\r\\n$contractResult | ConvertTo-Json | Set-Content -Path \\\"data/contractResult.json\\\"\",\r\n      {\r\n        \"extension\": \"ps1\",\r\n        \"type\": \"code\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/calculateContractsps1\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_Export-GitRepoInfoJsonps1\",\r\n      \"param (\\r\\n    [string]$RepoPath = \\\".\\\",\\r\\n    [string]$OutputFile = \\\"./git_repo_docs.json\\\",\\r\\n    [int]$CommitLimit = 50\\r\\n)\\r\\n\\r\\n# Helper functions\\r\\nfunction Run-Git { param($args) ; git -C $RepoPath @args 2>&1 }\\r\\nfunction Normalize-Path { param($p); return $p.Replace($RepoPath, \\\"\\\").Replace(\\\"\\\\\\\", \\\"/\\\").TrimStart(\\\"/\\\") }\\r\\nfunction Make-Doc { param($id, $text, $meta); return [pscustomobject]@{ id = $id; text = $text; metadata = $meta } }\\r\\n\\r\\n# Validate repo\\r\\nif (-not (Test-Path \\\"$RepoPath/.git\\\")) {\\r\\n    Write-Error \\\"Not a Git repo.\\\"\\r\\n    exit 1\\r\\n}\\r\\n\\r\\n$docs = @()\\r\\n\\r\\n# 🧠 1. Git metadata\\r\\n$meta = (Run-Git \\\"remote\\\" \\\"-v\\\") -join \\\"`n\\\"\\r\\n$docs += Make-Doc \\\"git_remotes\\\" $meta @{ type = \\\"git-meta\\\"; section = \\\"remotes\\\" }\\r\\n\\r\\n$branches = (Run-Git \\\"branch\\\" \\\"-a\\\") -join \\\"`n\\\"\\r\\n$docs += Make-Doc \\\"git_branches\\\" $branches @{ type = \\\"git-meta\\\"; section = \\\"branches\\\" }\\r\\n\\r\\n$status = (Run-Git \\\"status\\\") -join \\\"`n\\\"\\r\\n$docs += Make-Doc \\\"git_status\\\" $status @{ type = \\\"git-meta\\\"; section = \\\"status\\\" }\\r\\n\\r\\n$config = (Run-Git \\\"config\\\" \\\"--list\\\") -join \\\"`n\\\"\\r\\n$docs += Make-Doc \\\"git_config\\\" $config @{ type = \\\"git-meta\\\"; section = \\\"config\\\" }\\r\\n\\r\\n# 🧠 2. Commit logs\\r\\n$logLines = Run-Git \\\"log\\\" \\\"-n\\\" $CommitLimit \\\"--pretty=format:%h|%an|%ad|%s\\\" \\\"--date=iso\\\"\\r\\n$logFormatted = $logLines | ForEach-Object {\\r\\n    $parts = $_ -split \\\"\\\\|\\\", 4\\r\\n    \\\"- [$($parts[0])] $($parts[3]) by $($parts[1]) on $($parts[2])\\\"\\r\\n}\\r\\n$logText = $logFormatted -join \\\"`n\\\"\\r\\n$docs += Make-Doc \\\"git_log\\\" $logText @{ type = \\\"git-meta\\\"; section = \\\"log\\\" }\\r\\n\\r\\n# 🧠 2b. Committers summary\\r\\n$committerRaw = Run-Git \\\"shortlog\\\" \\\"-sne\\\"\\r\\n$committers = @()\\r\\nforeach ($line in $committerRaw) {\\r\\n    if ($line -match '^\\\\s*(\\\\d+)\\\\s+(.+)\\\\s+<(.+)>$') {\\r\\n        $committers += @{\\r\\n            name = $matches[2]\\r\\n            email = $matches[3]\\r\\n            commits = [int]$matches[1]\\r\\n        }\\r\\n    }\\r\\n}\\r\\n$committerSummary = $committers | Sort-Object -Property commits -Descending | ForEach-Object {\\r\\n    \\\"$($_.commits) commits – $($_.name) <$($_.email)>\\\"\\r\\n} -join \\\"`n\\\"\\r\\n$docs += Make-Doc \\\"git_committers\\\" $committerSummary @{ type = \\\"git-meta\\\"; section = \\\"committers\\\" }\\r\\n\\r\\n# 🧠 3. File list and contents\\r\\n$files = Get-ChildItem -Path $RepoPath -Recurse -File\\r\\nforeach ($file in $files) {\\r\\n    $relPath = Normalize-Path $file.FullName\\r\\n    $ext = [IO.Path]::GetExtension($file.Name).TrimStart(\\\".\\\").ToLower()\\r\\n    $type = switch ($ext) {\\r\\n        \\\"md\\\" { \\\"doc\\\" }\\r\\n        \\\"rst\\\" { \\\"doc\\\" }\\r\\n        \\\"ps1\\\" { \\\"code\\\" }\\r\\n        \\\"py\\\"  { \\\"code\\\" }\\r\\n        \\\"js\\\"  { \\\"code\\\" }\\r\\n        \\\"ts\\\"  { \\\"code\\\" }\\r\\n        \\\"sh\\\"  { \\\"code\\\" }\\r\\n        \\\"java\\\" { \\\"code\\\" }\\r\\n        \\\"cs\\\" { \\\"code\\\" }\\r\\n        \\\"cpp\\\" { \\\"code\\\" }\\r\\n        \\\"rb\\\"  { \\\"code\\\" }\\r\\n        \\\"json\\\" { \\\"config\\\" }\\r\\n        default { \\\"other\\\" }\\r\\n    }\\r\\n\\r\\n    # Load content (avoid massive files)\\r\\n    try {\\r\\n        $text = Get-Content $file.FullName -Raw -ErrorAction Stop\\r\\n        if ($text.Length -gt 0) {\\r\\n            $idSafe = $relPath.Replace(\\\"/\\\", \\\"_\\\").Replace(\\\".\\\", \\\"_\\\")\\r\\n            $docs += Make-Doc (\\r\\n                \\\"file_$idSafe\\\",\\r\\n                $text,\\r\\n                @{ type = $type; path = $relPath; extension = $ext }\\r\\n            )\\r\\n        }\\r\\n    } catch {\\r\\n        Write-Warning \\\"⚠️ Skipping unreadable file: $relPath\\\"\\r\\n    }\\r\\n}\\r\\n\\r\\n# 🧠 4. Output RAG-ready JSON\\r\\n$docs | ConvertTo-Json -Depth 10 | Set-Content -Encoding UTF8 -Path $OutputFile\\r\\n\\r\\nWrite-Host \\\"`n✅ RAG-ready Git repo JSON saved to: $OutputFile\\\"\\r\\n\",\r\n      {\r\n        \"extension\": \"ps1\",\r\n        \"type\": \"code\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/Export-GitRepoInfoJsonps1\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_git_repo_docsjson\",\r\n      \"[\\r\\n  {\\r\\n    \\\"id\\\": \\\"git_remotes\\\",\\r\\n    \\\"text\\\": \\\"git version 2.49.0.windows.1\\\",\\r\\n    \\\"metadata\\\": {\\r\\n      \\\"type\\\": \\\"git-meta\\\",\\r\\n      \\\"section\\\": \\\"remotes\\\"\\r\\n    }\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": \\\"git_branches\\\",\\r\\n    \\\"text\\\": \\\"unknown option: -a\\\\nusage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]\\\\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\\\\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--no-lazy-fetch]\\\\n           [--no-optional-locks] [--no-advice] [--bare] [--git-dir=<path>]\\\\n           [--work-tree=<path>] [--namespace=<name>] [--config-env=<name>=<envvar>]\\\\n           <command> [<args>]\\\",\\r\\n    \\\"metadata\\\": {\\r\\n      \\\"type\\\": \\\"git-meta\\\",\\r\\n      \\\"section\\\": \\\"branches\\\"\\r\\n    }\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": \\\"git_status\\\",\\r\\n    \\\"text\\\": \\\"usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]\\\\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\\\\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--no-lazy-fetch]\\\\n           [--no-optional-locks] [--no-advice] [--bare] [--git-dir=<path>]\\\\n           [--work-tree=<path>] [--namespace=<name>] [--config-env=<name>=<envvar>]\\\\n           <command> [<args>]\\\\n\\\\nThese are common Git commands used in various situations:\\\\n\\\\nstart a working area (see also: git help tutorial)\\\\n   clone      Clone a repository into a new directory\\\\n   init       Create an empty Git repository or reinitialize an existing one\\\\n\\\\nwork on the current change (see also: git help everyday)\\\\n   add        Add file contents to the index\\\\n   mv         Move or rename a file, a directory, or a symlink\\\\n   restore    Restore working tree files\\\\n   rm         Remove files from the working tree and from the index\\\\n\\\\nexamine the history and state (see also: git help revisions)\\\\n   bisect     Use binary search to find the commit that introduced a bug\\\\n   diff       Show changes between commits, commit and working tree, etc\\\\n   grep       Print lines matching a pattern\\\\n   log        Show commit logs\\\\n   show       Show various types of objects\\\\n   status     Show the working tree status\\\\n\\\\ngrow, mark and tweak your common history\\\\n   backfill   Download missing objects in a partial clone\\\\n   branch     List, create, or delete branches\\\\n   commit     Record changes to the repository\\\\n   merge      Join two or more development histories together\\\\n   rebase     Reapply commits on top of another base tip\\\\n   reset      Reset current HEAD to the specified state\\\\n   switch     Switch branches\\\\n   tag        Create, list, delete or verify a tag object signed with GPG\\\\n\\\\ncollaborate (see also: git help workflows)\\\\n   fetch      Download objects and refs from another repository\\\\n   pull       Fetch from and integrate with another repository or a local branch\\\\n   push       Update remote refs along with associated objects\\\\n\\\\n'git help -a' and 'git help -g' list available subcommands and some\\\\nconcept guides. See 'git help <command>' or 'git help <concept>'\\\\nto read about a specific subcommand or concept.\\\\nSee 'git help git' for an overview of the system.\\\",\\r\\n    \\\"metadata\\\": {\\r\\n      \\\"type\\\": \\\"git-meta\\\",\\r\\n      \\\"section\\\": \\\"status\\\"\\r\\n    }\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": \\\"git_config\\\",\\r\\n    \\\"text\\\": \\\"unknown option: --list\\\\nusage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]\\\\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\\\\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--no-lazy-fetch]\\\\n           [--no-optional-locks] [--no-advice] [--bare] [--git-dir=<path>]\\\\n           [--work-tree=<path>] [--namespace=<name>] [--config-env=<name>=<envvar>]\\\\n           <command> [<args>]\\\",\\r\\n    \\\"metadata\\\": {\\r\\n      \\\"type\\\": \\\"git-meta\\\",\\r\\n      \\\"section\\\": \\\"config\\\"\\r\\n    }\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": \\\"git_log\\\",\\r\\n    \\\"text\\\": \\\"- [unknown option: -n]  by  on \\\\n- [usage: git [-v ]  by  --version] [-h  on  --help] [-C <path>] [-c <name>=<value>]\\\\n- [           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]]  by  on \\\\n- [           [-p ]  --no-pager] [--no-replace-objects] [--no-lazy-fetch] by  --paginate  on  -P \\\\n- [           [--no-optional-locks] [--no-advice] [--bare] [--git-dir=<path>]]  by  on \\\\n- [           [--work-tree=<path>] [--namespace=<name>] [--config-env=<name>=<envvar>]]  by  on \\\\n- [           <command> [<args>]]  by  on \\\",\\r\\n    \\\"metadata\\\": {\\r\\n      \\\"type\\\": \\\"git-meta\\\",\\r\\n      \\\"section\\\": \\\"log\\\"\\r\\n    }\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_calculateContractsps1\\\",\\r\\n      \\\". \\\\\\\"classes\\\\\\\\contract.ps1\\\\\\\"\\\\r\\\\n. \\\\\\\"functions\\\\\\\\bankholidays.ps1\\\\\\\"\\\\r\\\\n\\\\r\\\\n# Check if the execution directory is the script directory\\\\r\\\\nif ($PSScriptRoot -ne (Get-Location)) {\\\\r\\\\n    Write-Error \\\\\\\"The execution directory is not the script directory. Please change to the script directory. $PSScriptRoot\\\\\\\"\\\\r\\\\n    Exit 1\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n# Check for PowerShell version 7 or higher\\\\r\\\\nif ($PSVersionTable.PSVersion.Major -lt 7) {\\\\r\\\\n    Write-Error \\\\\\\"This script requires PowerShell 7 or higher. Please upgrade your PowerShell version.\\\\\\\"\\\\r\\\\n    Exit 1\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n# Load the combined object from the JSON file\\\\r\\\\n$contract = [Contract]::LoadFromFile(\\\\\\\"config/Contract.json\\\\\\\")\\\\r\\\\n$contractResult = $contract.Calculate()\\\\r\\\\n\\\\r\\\\n# loop throug contractresult to find the highest and lowewst month\\\\r\\\\n$highestMonth = $contractResult | Sort-Object -Property TotalCost -Descending | Select-Object -First 1\\\\r\\\\n$lowestMonth = $contractResult | Sort-Object -Property TotalCost | Select-Object -First 1\\\\r\\\\n\\\\r\\\\nWrite-Output \\\\\\\"Highest month: $($highestMonth.Month) - TotalCost: €$($highestMonth.TotalCost)\\\\\\\"\\\\r\\\\nWrite-Output \\\\\\\"Lowest month: $($lowestMonth.Month) - TotalCost: €$($lowestMonth.TotalCost)\\\\\\\"\\\\r\\\\n\\\\r\\\\nWrite-Output \\\\\\\"Contract loaded: $($contract.FirstName) $($contract.LastName) - Year: $($contract.Year)\\\\\\\"\\\\r\\\\nWrite-Output \\\\\\\"Morning cost per hour: €$($contract.MorningCostPerHour) - Morning subsidy per hour: €$($contract.MorningGovSubsidyPerHour)\\\\\\\"\\\\r\\\\n\\\\r\\\\n# Output the workdays per month\\\\r\\\\nWrite-Output \\\\\\\"Workdays per month:\\\\\\\"\\\\r\\\\n$contractResult | ForEach-Object {\\\\r\\\\n    Write-Output (\\\\\\\"Month: {0} - Count: {1} - TotalCost: €{2:F2} - TotalSubsidy: €{3:F2}\\\\\\\" -f $_.Month, $_.Days, $_.TotalCost, $_.TotalSubsidy)\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n# Save the workdays per month to a JSON file\\\\r\\\\n$contractResult | ConvertTo-Json | Set-Content -Path \\\\\\\"data/contractResult.json\\\\\\\"\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"ps1\\\",\\r\\n        \\\"type\\\": \\\"code\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/calculateContractsps1\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_Export-GitRepoInfoJsonps1\\\",\\r\\n      \\\"param (\\\\r\\\\n    [string]$RepoPath = \\\\\\\".\\\\\\\",\\\\r\\\\n    [string]$OutputFile = \\\\\\\"./git_repo_docs.json\\\\\\\",\\\\r\\\\n    [int]$CommitLimit = 50\\\\r\\\\n)\\\\r\\\\n\\\\r\\\\n# Helper functions\\\\r\\\\nfunction Run-Git { param($args) ; git -C $RepoPath @args 2>&1 }\\\\r\\\\nfunction Normalize-Path { param($p); return $p.Replace($RepoPath, \\\\\\\"\\\\\\\").Replace(\\\\\\\"\\\\\\\\\\\\\\\", \\\\\\\"/\\\\\\\").TrimStart(\\\\\\\"/\\\\\\\") }\\\\r\\\\nfunction Make-Doc { param($id, $text, $meta); return [pscustomobject]@{ id = $id; text = $text; metadata = $meta } }\\\\r\\\\n\\\\r\\\\n# Validate repo\\\\r\\\\nif (-not (Test-Path \\\\\\\"$RepoPath/.git\\\\\\\")) {\\\\r\\\\n    Write-Error \\\\\\\"Not a Git repo.\\\\\\\"\\\\r\\\\n    exit 1\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n$docs = @()\\\\r\\\\n\\\\r\\\\n# 🧠 1. Git metadata\\\\r\\\\n$meta = (Run-Git \\\\\\\"remote\\\\\\\" \\\\\\\"-v\\\\\\\") -join \\\\\\\"`n\\\\\\\"\\\\r\\\\n$docs += Make-Doc \\\\\\\"git_remotes\\\\\\\" $meta @{ type = \\\\\\\"git-meta\\\\\\\"; section = \\\\\\\"remotes\\\\\\\" }\\\\r\\\\n\\\\r\\\\n$branches = (Run-Git \\\\\\\"branch\\\\\\\" \\\\\\\"-a\\\\\\\") -join \\\\\\\"`n\\\\\\\"\\\\r\\\\n$docs += Make-Doc \\\\\\\"git_branches\\\\\\\" $branches @{ type = \\\\\\\"git-meta\\\\\\\"; section = \\\\\\\"branches\\\\\\\" }\\\\r\\\\n\\\\r\\\\n$status = (Run-Git \\\\\\\"status\\\\\\\") -join \\\\\\\"`n\\\\\\\"\\\\r\\\\n$docs += Make-Doc \\\\\\\"git_status\\\\\\\" $status @{ type = \\\\\\\"git-meta\\\\\\\"; section = \\\\\\\"status\\\\\\\" }\\\\r\\\\n\\\\r\\\\n$config = (Run-Git \\\\\\\"config\\\\\\\" \\\\\\\"--list\\\\\\\") -join \\\\\\\"`n\\\\\\\"\\\\r\\\\n$docs += Make-Doc \\\\\\\"git_config\\\\\\\" $config @{ type = \\\\\\\"git-meta\\\\\\\"; section = \\\\\\\"config\\\\\\\" }\\\\r\\\\n\\\\r\\\\n# 🧠 2. Commit logs\\\\r\\\\n$logLines = Run-Git \\\\\\\"log\\\\\\\" \\\\\\\"-n\\\\\\\" $CommitLimit \\\\\\\"--pretty=format:%h|%an|%ad|%s\\\\\\\" \\\\\\\"--date=iso\\\\\\\"\\\\r\\\\n$logFormatted = $logLines | ForEach-Object {\\\\r\\\\n    $parts = $_ -split \\\\\\\"\\\\\\\\|\\\\\\\", 4\\\\r\\\\n    \\\\\\\"- [$($parts[0])] $($parts[3]) by $($parts[1]) on $($parts[2])\\\\\\\"\\\\r\\\\n}\\\\r\\\\n$logText = $logFormatted -join \\\\\\\"`n\\\\\\\"\\\\r\\\\n$docs += Make-Doc \\\\\\\"git_log\\\\\\\" $logText @{ type = \\\\\\\"git-meta\\\\\\\"; section = \\\\\\\"log\\\\\\\" }\\\\r\\\\n\\\\r\\\\n# 🧠 3. File list and contents\\\\r\\\\n$files = Get-ChildItem -Path $RepoPath -Recurse -File\\\\r\\\\nforeach ($file in $files) {\\\\r\\\\n    $relPath = Normalize-Path $file.FullName\\\\r\\\\n    $ext = [IO.Path]::GetExtension($file.Name).TrimStart(\\\\\\\".\\\\\\\").ToLower()\\\\r\\\\n    $type = switch ($ext) {\\\\r\\\\n        \\\\\\\"md\\\\\\\" { \\\\\\\"doc\\\\\\\" }\\\\r\\\\n        \\\\\\\"rst\\\\\\\" { \\\\\\\"doc\\\\\\\" }\\\\r\\\\n        \\\\\\\"ps1\\\\\\\" { \\\\\\\"code\\\\\\\" }\\\\r\\\\n        \\\\\\\"py\\\\\\\"  { \\\\\\\"code\\\\\\\" }\\\\r\\\\n        \\\\\\\"js\\\\\\\"  { \\\\\\\"code\\\\\\\" }\\\\r\\\\n        \\\\\\\"ts\\\\\\\"  { \\\\\\\"code\\\\\\\" }\\\\r\\\\n        \\\\\\\"sh\\\\\\\"  { \\\\\\\"code\\\\\\\" }\\\\r\\\\n        \\\\\\\"java\\\\\\\" { \\\\\\\"code\\\\\\\" }\\\\r\\\\n        \\\\\\\"cs\\\\\\\" { \\\\\\\"code\\\\\\\" }\\\\r\\\\n        \\\\\\\"cpp\\\\\\\" { \\\\\\\"code\\\\\\\" }\\\\r\\\\n        \\\\\\\"rb\\\\\\\"  { \\\\\\\"code\\\\\\\" }\\\\r\\\\n        \\\\\\\"json\\\\\\\" { \\\\\\\"config\\\\\\\" }\\\\r\\\\n        default { \\\\\\\"other\\\\\\\" }\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    # Load content (avoid massive files)\\\\r\\\\n    try {\\\\r\\\\n        $text = Get-Content $file.FullName -Raw -ErrorAction Stop\\\\r\\\\n        if ($text.Length -gt 0) {\\\\r\\\\n            $idSafe = $relPath.Replace(\\\\\\\"/\\\\\\\", \\\\\\\"_\\\\\\\").Replace(\\\\\\\".\\\\\\\", \\\\\\\"_\\\\\\\")\\\\r\\\\n            $docs += Make-Doc (\\\\r\\\\n                \\\\\\\"file_$idSafe\\\\\\\",\\\\r\\\\n                $text,\\\\r\\\\n                @{ type = $type; path = $relPath; extension = $ext }\\\\r\\\\n            )\\\\r\\\\n        }\\\\r\\\\n    } catch {\\\\r\\\\n        Write-Warning \\\\\\\"⚠️ Skipping unreadable file: $relPath\\\\\\\"\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n# 🧠 4. Output RAG-ready JSON\\\\r\\\\n$docs | ConvertTo-Json -Depth 10 | Set-Content -Encoding UTF8 -Path $OutputFile\\\\r\\\\n\\\\r\\\\nWrite-Host \\\\\\\"`n✅ RAG-ready Git repo JSON saved to: $OutputFile\\\\\\\"\\\\r\\\\n\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"ps1\\\",\\r\\n        \\\"type\\\": \\\"code\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/Export-GitRepoInfoJsonps1\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_READMEmd\\\",\\r\\n      \\\"# PowerShell Playground\\\\r\\\\n\\\\r\\\\nWelcome to the PowerShell Playground repository! This is a personal space dedicated to experimenting with PowerShell scripts, modules, and various automation tasks. Whether you're a seasoned PowerShell user or just starting out, this repository offers a variety of resources to explore and enhance your scripting skills.\\\\r\\\\n\\\\r\\\\n## Table of Contents\\\\r\\\\n\\\\r\\\\n- [Introduction](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#introduction)\\\\r\\\\n- [Repository Structure](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#repository-structure)\\\\r\\\\n- [Getting Started](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#getting-started)\\\\r\\\\n- [Scripts Overview](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#scripts-overview)\\\\r\\\\n- [Modules](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#modules)\\\\r\\\\n- [Contributing](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#contributing)\\\\r\\\\n- [License](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#license)\\\\r\\\\n\\\\r\\\\n## Introduction\\\\r\\\\n\\\\r\\\\nPowerShell is a powerful scripting language and command-line shell designed especially for system administration. This repository serves as a sandbox to test, learn, and develop PowerShell scripts and modules. Feel free to explore the content, suggest improvements, or contribute your own scripts.\\\\r\\\\n\\\\r\\\\n## Repository Structure\\\\r\\\\n\\\\r\\\\nThe repository is organized into the following directories:\\\\r\\\\n\\\\r\\\\n- **classes/**: Contains PowerShell class definitions used across various scripts.\\\\r\\\\n- **config/**: Configuration files that support the scripts and modules.\\\\r\\\\n- **data/**: Sample data files utilized by the scripts for processing and testing.\\\\r\\\\n- **functions/**: Reusable PowerShell functions that can be imported and used in different scripts.\\\\r\\\\n- **scripts/**: Standalone PowerShell scripts demonstrating specific tasks or solutions.\\\\r\\\\n- **tests/**: Test scripts to validate the functionality of modules and functions.\\\\r\\\\n- **.github/workflows/**: GitHub Actions workflows for CI/CD pipelines.\\\\r\\\\n\\\\r\\\\n## Getting Started\\\\r\\\\n\\\\r\\\\nTo get started with the PowerShell Playground:\\\\r\\\\n\\\\r\\\\n1. **Clone the Repository**:\\\\r\\\\n    \\\\r\\\\n    ```bash\\\\r\\\\n    git clone https://github.com/danielsiegl/powershellplayground.git\\\\r\\\\n    cd powershellplayground\\\\r\\\\n    ```\\\\r\\\\n    \\\\r\\\\n2. **Explore the Directories**: Navigate through the directories to understand the structure and content.\\\\r\\\\n    \\\\r\\\\n3. **Run Sample Scripts**: Inside the `scripts/` directory, you'll find various PowerShell scripts. Open and run them using PowerShell to see them in action.\\\\r\\\\n    \\\\r\\\\n4. **Utilize Functions**: The `functions/` directory contains reusable functions. You can import these into your own scripts as needed.\\\\r\\\\n    \\\\r\\\\n\\\\r\\\\n## Scripts Overview\\\\r\\\\n\\\\r\\\\nHere are some notable scripts included in this repository:\\\\r\\\\n\\\\r\\\\n- **calculateContract.ps1**: A script to calculate contract details based on provided data. This script demonstrates data processing and output formatting in PowerShell.\\\\r\\\\n\\\\r\\\\n## Modules\\\\r\\\\n\\\\r\\\\nThe repository includes custom modules located in the `functions/` directory. These modules encapsulate specific functionalities and can be imported into your PowerShell session or scripts:\\\\r\\\\n\\\\r\\\\n```powershell\\\\r\\\\nImport-Module -Name .\\\\\\\\functions\\\\\\\\YourModuleName.psm1\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nReplace `YourModuleName.psm1` with the actual module name you wish to import.\\\\r\\\\n\\\\r\\\\n## Contributing\\\\r\\\\n\\\\r\\\\nContributions are welcome! If you have scripts, functions, or modules that you believe would benefit others, feel free to fork the repository and submit a pull request. Please ensure that your contributions adhere to the following guidelines:\\\\r\\\\n\\\\r\\\\n- Follow the existing directory structure.\\\\r\\\\n- Include comments and documentation within your scripts.\\\\r\\\\n- Test your scripts for functionality and reliability.\\\\r\\\\n\\\\r\\\\n## License\\\\r\\\\n\\\\r\\\\nThis project is licensed under the MIT License. For more details, refer to the `LICENSE` file in the repository.\\\\r\\\\n\\\\r\\\\n---\\\\r\\\\n\\\\r\\\\nThank you for visiting the PowerShell Playground. Happy scripting!\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"md\\\",\\r\\n        \\\"type\\\": \\\"doc\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/READMEmd\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_runOpenAIModelsps1\\\",\\r\\n      \\\"# check for pwsh\\\\r\\\\nif ($PSVersionTable.PSEdition -ne \\\\\\\"Core\\\\\\\") {\\\\r\\\\n    throw  \\\\\\\"This script is intended to be run in PowerShell Core (pwsh).\\\\\\\"\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n# Install the required module if not installed\\\\r\\\\n# Install-Module -Name Microsoft.PowerShell.Utility -Force\\\\r\\\\n. .\\\\\\\\functions\\\\\\\\Get-ApiToken.ps1\\\\r\\\\n. .\\\\\\\\functions\\\\\\\\Invoke-ChatCompletion.ps1\\\\r\\\\n\\\\r\\\\n$baseUrl = \\\\\\\"https://api.openai.com/v1\\\\\\\"  #\\\\\\\"https://models.inference.ai.azure.com\\\\\\\"\\\\r\\\\n$apiKey = Get-ApiToken  # Ensure you have set this environment variable\\\\r\\\\n$model = \\\\\\\"o3-mini\\\\\\\" #\\\\\\\"4o-mini\\\\\\\" #\\\\\\\"gpt-4o\\\\\\\"  # Specify the model you want to use\\\\r\\\\n\\\\r\\\\n$prompt = \\\\\\\"What is the capital of France?\\\\\\\"\\\\r\\\\n\\\\r\\\\n# Example usage\\\\r\\\\nWrite-Output \\\\\\\"Prompt: $prompt\\\\\\\"\\\\r\\\\n$ResponseMessage = Invoke-ChatCompletion -Prompt $prompt -ApiKey $apiKey -BaseUrl $baseUrl -Model $model\\\\r\\\\nWrite-Output \\\\\\\"$($ResponseMessage[0])\\\\\\\"\\\\r\\\\nWrite-Output \\\\\\\"Response: $($ResponseMessage[1])\\\\\\\"\\\\r\\\\n\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"ps1\\\",\\r\\n        \\\"type\\\": \\\"code\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/runOpenAIModelsps1\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_runSetAPISecretps1\\\",\\r\\n      \\\"# This script sets the API secret for the GitHub repository using PnP PowerShell.\\\\r\\\\n\\\\r\\\\n# Ensure you have the PnP PowerShell module installed\\\\r\\\\nif (-not (Get-Module -ListAvailable -Name PnP.PowerShell)) {\\\\r\\\\n    Install-Module PnP.PowerShell -Scope CurrentUser -AllowPrerelease -SkipPublisherCheck\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n# Ask the User for the API secret\\\\r\\\\nWrite-Output \\\\\\\"Please enter your GitHub API secret: <ctrl+shift+v> to paste\\\\\\\"\\\\r\\\\n$secretUrl = git remote get-url origin\\\\r\\\\nwrite-output \\\\\\\"Setting API secret for $secretUrl\\\\\\\"\\\\r\\\\nAdd-PnPStoredCredential -Name $secretUrl  -Username API_TOKEN -Password (Read-Host -Prompt \\\\\\\"Enter your GitHub API secret\\\\\\\" -AsSecureString)\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"ps1\\\",\\r\\n        \\\"type\\\": \\\"code\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/runSetAPISecretps1\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_github_workflows_Validateyml\\\",\\r\\n      \\\"name: Validate\\\\r\\\\non: push\\\\r\\\\n\\\\r\\\\npermissions:\\\\r\\\\n  checks: write\\\\r\\\\n  pull-requests: write\\\\r\\\\n\\\\r\\\\njobs:\\\\r\\\\n  powershell-linter:\\\\r\\\\n    name: Run Linter\\\\r\\\\n    runs-on: ubuntu-latest\\\\r\\\\n    defaults:\\\\r\\\\n      run:\\\\r\\\\n        shell: pwsh\\\\r\\\\n    steps:\\\\r\\\\n      - uses: actions/checkout@v4\\\\r\\\\n      - name: Install PSScriptAnalyzer module\\\\r\\\\n        run: |\\\\r\\\\n          Set-PSRepository PSGallery -InstallationPolicy Trusted\\\\r\\\\n          Install-Module PSScriptAnalyzer -ErrorAction Stop\\\\r\\\\n          \\\\r\\\\n      - name: Lint with PSScriptAnalyzer\\\\r\\\\n        run: |\\\\r\\\\n          Invoke-ScriptAnalyzer -Path **\\\\\\\\*.ps1 -Recurse -Outvariable issues\\\\r\\\\n          $errors   = $issues.Where({$_.Severity -eq 'Error'})\\\\r\\\\n          $warnings = $issues.Where({$_.Severity -eq 'Warning'})\\\\r\\\\n          if ($errors) {\\\\r\\\\n              Write-Error \\\\\\\"There were $($errors.Count) errors and $($warnings.Count) warnings total.\\\\\\\"\\\\r\\\\n          } else {\\\\r\\\\n              Write-Output \\\\\\\"There were $($errors.Count) errors and $($warnings.Count) warnings total.\\\\\\\"\\\\r\\\\n          }\\\\r\\\\n\\\\r\\\\n            if ($issues) {\\\\r\\\\n              # Format issues into a markdown table\\\\r\\\\n              $markdownTable = \\\\\\\"\\\\\\\"\\\\r\\\\n              $markdownTable += \\\\\\\"| Severity | RuleName | ScriptName | Line | Message |`n\\\\\\\"\\\\r\\\\n              $markdownTable += \\\\\\\"|----------|----------|------------|------|---------|`n\\\\\\\"\\\\r\\\\n\\\\r\\\\n              foreach ($issue in $issues) {\\\\r\\\\n                $markdownTable += \\\\\\\"| $($issue.Severity) |$($issue.RuleName) | $($issue.ScriptName) |$($issue.Line) | $($issue.Message) |`n\\\\\\\"\\\\r\\\\n              }\\\\r\\\\n\\\\r\\\\n              # Output the markdown table to the step summary\\\\r\\\\n              $markdownTable | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n          # Fail the build if there are any errors in the script files\\\\r\\\\n          if ($errors) {\\\\r\\\\n              Write-Error \\\\\\\"Errors found in script files.\\\\\\\"\\\\r\\\\n              exit 1\\\\r\\\\n          } else {\\\\r\\\\n              Write-Output \\\\\\\"No errors found in script files.\\\\\\\"\\\\r\\\\n          }\\\\r\\\\n\\\\r\\\\n  pester-unit-tests:\\\\r\\\\n    name: Run Pester\\\\r\\\\n    runs-on: ubuntu-latest\\\\r\\\\n    defaults:\\\\r\\\\n      run:\\\\r\\\\n        shell: pwsh\\\\r\\\\n    steps:\\\\r\\\\n      - name: Check out repository code\\\\r\\\\n        uses: actions/checkout@v4\\\\r\\\\n      \\\\r\\\\n      - name: Perform a Pester Tests\\\\r\\\\n        if: always()\\\\r\\\\n        run: |\\\\r\\\\n          Invoke-Pester ./tests/*.ps1 -Passthru -OutputFile \\\\\\\"./test-results/TestResults.xml\\\\\\\" -OutputFormat NUnitXml\\\\r\\\\n          # don't fail on failed tests\\\\r\\\\n          exit 0\\\\r\\\\n\\\\r\\\\n      - name: Publish Results\\\\r\\\\n        uses: EnricoMi/publish-unit-test-result-action@v2\\\\r\\\\n        if: always()\\\\r\\\\n        with:\\\\r\\\\n          files: |\\\\r\\\\n            test-results/**/*.xml\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"yml\\\",\\r\\n        \\\"type\\\": \\\"other\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/github/workflows/Validateyml\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_obsidian_gitignore\\\",\\r\\n      \\\"/appearance.json\\\\r\\\\n/core-plugins.json\\\\r\\\\n/workspace.json\\\\r\\\\n\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"gitignore\\\",\\r\\n        \\\"type\\\": \\\"other\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/obsidian/gitignore\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_obsidian_appjson\\\",\\r\\n      \\\"{\\\\r\\\\n  \\\\\\\"useMarkdownLinks\\\\\\\": true\\\\r\\\\n}\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"json\\\",\\r\\n        \\\"type\\\": \\\"config\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/obsidian/appjson\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_classes_contractps1\\\",\\r\\n      \\\"# Load the bank holidays function\\\\r\\\\n. \\\\\\\"$PSScriptRoot/../functions\\\\\\\\bankholidays.ps1\\\\\\\"\\\\r\\\\n\\\\r\\\\n# Define the Workday class\\\\r\\\\n# This class represents a workday with properties for date, day of the week, start time, and end time.\\\\r\\\\nclass Workday {\\\\r\\\\n    [string]$Date\\\\r\\\\n    [string]$DayOfWeek\\\\r\\\\n    [string]$StartTime\\\\r\\\\n    [string]$EndTime\\\\r\\\\n    [double]$TotalCost\\\\r\\\\n    [double]$TotalSubsidy\\\\r\\\\n\\\\r\\\\n    Workday([string]$date, [string]$dayOfWeek, [string]$startTime, [string]$endTime, [double]$totalCost, [double]$totalSubsidy) {\\\\r\\\\n        $this.Date = $date\\\\r\\\\n        $this.DayOfWeek = $dayOfWeek\\\\r\\\\n        $this.StartTime = $startTime\\\\r\\\\n        $this.EndTime = $endTime\\\\r\\\\n        $this.TotalCost = $totalCost\\\\r\\\\n        $this.TotalSubsidy = $totalSubsidy\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n# Define the Contract class\\\\r\\\\n# This class represents a contract with properties for first name, last name, year, cost per hour, subsidy per hour, and schedule.\\\\r\\\\nclass MonthlyCost {\\\\r\\\\n    [string]$Month\\\\r\\\\n    [int] $Days\\\\r\\\\n    [double] $TotalCost\\\\r\\\\n    [double] $TotalSubsidy\\\\r\\\\n\\\\r\\\\n    MonthlyCost([string]$month, [int]$days, [double]$totalCost, [double]$totalSubsidy) {\\\\r\\\\n        $this.Month = $month\\\\r\\\\n        $this.Days = $days\\\\r\\\\n        $this.TotalCost = $totalCost\\\\r\\\\n        $this.TotalSubsidy = $totalSubsidy\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n# Define the DailyCost class\\\\r\\\\n# This class represents the cost calculation for a single day with properties for start time, end time, cost per hour, and government subsidy per hour.\\\\r\\\\nclass DailyCost {\\\\r\\\\n    [DateTime]$StartTime\\\\r\\\\n    [DateTime]$EndTime\\\\r\\\\n    [double]$MorningCostPerHour\\\\r\\\\n    [double]$AfternoonCostPerHour\\\\r\\\\n    [double]$MorningGovSubsidyPerHour\\\\r\\\\n    [double]$AfternoonGovSubsidyPerHour\\\\r\\\\n    [double]$TotalCost\\\\r\\\\n    [double]$TotalSubsidy\\\\r\\\\n    # Constructor to initialize the CostWindow object\\\\r\\\\n    DailyCost([DateTime]$start, [DateTime]$end, [double]$morningCost, [double]$afternoonCost, [double]$morningGovSubsidy, [double]$afternoonGovSubsidy) {\\\\r\\\\n        if ($end -le $start) {\\\\r\\\\n            throw \\\\\\\"End time must be after start time.\\\\\\\"\\\\r\\\\n        }\\\\r\\\\n        $this.StartTime = $start\\\\r\\\\n        $this.EndTime = $end\\\\r\\\\n        $this.MorningCostPerHour = $morningCost\\\\r\\\\n        $this.AfternoonCostPerHour = $afternoonCost\\\\r\\\\n        $this.MorningGovSubsidyPerHour = $morningGovSubsidy\\\\r\\\\n        $this.AfternoonGovSubsidyPerHour = $afternoonGovSubsidy\\\\r\\\\n        # Calculate costs upon initialization\\\\r\\\\n        $this.CalculateCosts()\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    hidden [void] CalculateCosts() {\\\\r\\\\n        $sumOfCost = 0\\\\r\\\\n        $sumOfSub = 0\\\\r\\\\n        $current = $this.StartTime\\\\r\\\\n        while ($current -lt $this.EndTime) {\\\\r\\\\n            $nextHour = $current.AddHours(1)\\\\r\\\\n            if ($current.Hour -ge 8 -and $current.Hour -lt 13) {\\\\r\\\\n                # Morning pricing with optional government subsidy\\\\r\\\\n                $cost = $this.MorningCostPerHour - $this.MorningGovSubsidyPerHour\\\\r\\\\n                $sumOfCost += [math]::Min(($this.EndTime - $current).TotalHours, 1) * [math]::Max($cost, 0)\\\\r\\\\n                $sumOfSub += [math]::Min(($this.EndTime - $current).TotalHours, 1) * $this.MorningGovSubsidyPerHour\\\\r\\\\n            } elseif ($current.Hour -ge 13 -and $current.Hour -lt 15) {\\\\r\\\\n                # Afternoon pricing with optional government subsidy\\\\r\\\\n                $cost = $this.AfternoonCostPerHour - $this.AfternoonGovSubsidyPerHour\\\\r\\\\n                $sumOfCost += [math]::Min(($this.EndTime - $current).TotalHours, 1) * [math]::Max($cost, 0)\\\\r\\\\n                $sumOfSub += [math]::Min(($this.EndTime - $current).TotalHours, 1) * $this.AfternoonGovSubsidyPerHour\\\\r\\\\n            }\\\\r\\\\n            $current = $nextHour\\\\r\\\\n        }\\\\r\\\\n        $this.TotalCost = [math]::Round($sumOfCost, 2)\\\\r\\\\n        $this.TotalSubsidy = [math]::Round($sumOfSub, 2)\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    [double] GetTotalCost() {\\\\r\\\\n        return [math]::Round($this.TotalCost, 2)\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    [double] GetTotalSubsidy() {\\\\r\\\\n        return [math]::Round($this.TotalSubsidy, 2)\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n# Define the Contract class\\\\r\\\\n# This class represents a contract with properties for first name, last name, year, cost per hour, subsidy per hour, and schedule.\\\\r\\\\n\\\\r\\\\nclass Contract {\\\\r\\\\n    [string]$FirstName\\\\r\\\\n    [string]$LastName\\\\r\\\\n    [string]$Year\\\\r\\\\n    [double]$MorningCostPerHour\\\\r\\\\n    [double]$MorningGovSubsidyPerHour\\\\r\\\\n    [double]$AfternoonCostPerHour\\\\r\\\\n    [double]$AfternoonGovSubsidyPerHour\\\\r\\\\n    [hashtable]$Schedule\\\\r\\\\n\\\\r\\\\n    Contract([string]$firstName, [string]$lastName, [string]$year, [double]$morningCostPerHour, [double]$morningGovSubsidyPerHour, [double]$afternoonCostPerHour, [double]$afternoonGovSubsidyPerHour, [hashtable]$schedule) {\\\\r\\\\n        $this.FirstName = $firstName\\\\r\\\\n        $this.LastName = $lastName\\\\r\\\\n        $this.Year = $year\\\\r\\\\n        $this.MorningCostPerHour = $morningCostPerHour\\\\r\\\\n        $this.MorningGovSubsidyPerHour = $morningGovSubsidyPerHour\\\\r\\\\n        $this.AfternoonCostPerHour = $afternoonCostPerHour\\\\r\\\\n        $this.AfternoonGovSubsidyPerHour = $afternoonGovSubsidyPerHour\\\\r\\\\n        $this.Schedule = $schedule\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    [System.Collections.Generic.List[MonthlyCost]] Calculate() {\\\\r\\\\n        # Function body goes here\\\\r\\\\n        # Define the start and end dates for the year\\\\r\\\\n        [datetime]$startDateContract = Get-Date -Year $this.Year -Month 1 -Day 1\\\\r\\\\n        [datetime]$endDateContract = Get-Date -Year $this.Year -Month 12 -Day 31\\\\r\\\\n        [double]$morningRate = $this.MorningCostPerHour\\\\r\\\\n        [double]$afternoonRate = $this.AfternoonCostPerHour\\\\r\\\\n        [double]$morningGovSubsidy = $this.MorningGovSubsidyPerHour\\\\r\\\\n        [double]$afternoonGovSubsidy = $this.AfternoonGovSubsidyPerHour\\\\r\\\\n\\\\r\\\\n        $holidayArray = Get-AustrianBankHolidays -StartDate $startDateContract -EndDate $endDateContract\\\\r\\\\n\\\\r\\\\n        # Initialize an array to hold workdays\\\\r\\\\n        #[Workday[]]$workdays = @()\\\\r\\\\n        [System.Collections.Generic.List[Workday]] $workdays = [System.Collections.Generic.List[Workday]]::new()\\\\r\\\\n\\\\r\\\\n        # Loop through each day in the year\\\\r\\\\n        $currentDate = $startDateContract\\\\r\\\\n        while ($currentDate -le $endDateContract) {\\\\r\\\\n            $holiday = $holidayArray | Where-Object { $_.Date.Date -eq $currentDate.Date }\\\\r\\\\n            if ($holiday) {\\\\r\\\\n                $isHoliday = $true\\\\r\\\\n            } else {\\\\r\\\\n                $isHoliday = $false\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            # Get the day of the week\\\\r\\\\n            $dayOfWeek = $currentDate.DayOfWeek\\\\r\\\\n\\\\r\\\\n            # Check if the day is in the schedule and is not a holiday\\\\r\\\\n            if ($this.Schedule.Contains(\\\\\\\"$dayOfWeek\\\\\\\") -and -not $isHoliday) {\\\\r\\\\n\\\\r\\\\n                # combine the schedule and person information to calculate the cost\\\\r\\\\n                $dailySchedule = $this.Schedule[$dayOfWeek.ToString()]\\\\r\\\\n                $start = [DateTime]::ParseExact(\\\\\\\"$($currentDate.ToString('yyyy-MM-dd')) $($dailySchedule.Start)\\\\\\\", 'yyyy-MM-dd hh:mm tt', $null)\\\\r\\\\n                $end = [DateTime]::ParseExact(\\\\\\\"$($currentDate.ToString('yyyy-MM-dd')) $($dailySchedule.End)\\\\\\\", 'yyyy-MM-dd hh:mm tt', $null)\\\\r\\\\n\\\\r\\\\n                # Create a CostWindow object to calculate the cost for each workday - bit of an overkill - but the best way to show the usage of the class\\\\r\\\\n                $costWindow = [DailyCost]::new($start, $end, $morningRate, $afternoonRate, $morningGovSubsidy, $afternoonGovSubsidy)\\\\r\\\\n                # Create a Workday object\\\\r\\\\n                $workday = [Workday]::new(\\\\r\\\\n                    $currentDate.ToString('yyyy-MM-dd'),\\\\r\\\\n                    $dayOfWeek.ToString(),\\\\r\\\\n                    $this.Schedule[$dayOfWeek.ToString()].Start,\\\\r\\\\n                    $this.Schedule[$dayOfWeek.ToString()].End,\\\\r\\\\n                    $costWindow.GetTotalCost(),\\\\r\\\\n                    $costWindow.GetTotalSubsidy()\\\\r\\\\n                )\\\\r\\\\n                # Add the workday to the array\\\\r\\\\n                $workdays += $workday\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            # Move to the next day\\\\r\\\\n            $currentDate = $currentDate.AddDays(1)\\\\r\\\\n        }\\\\r\\\\n\\\\r\\\\n        Write-Debug $workdays.Count\\\\r\\\\n\\\\r\\\\n        $yearlyCosts = $workdays |\\\\r\\\\n            Group-Object { (Get-Date $_.Date).ToString('yyyy-MM') } |\\\\r\\\\n            ForEach-Object {\\\\r\\\\n                [MonthlyCost]::new(\\\\r\\\\n                    $_.Name,\\\\r\\\\n                    $_.Count,\\\\r\\\\n                    ($_.Group | Measure-Object -Property TotalCost -Sum).Sum,\\\\r\\\\n                    ($_.Group | Measure-Object -Property TotalSubsidy -Sum).Sum\\\\r\\\\n                )\\\\r\\\\n            }\\\\r\\\\n        return $yearlyCosts\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    static [Contract] LoadFromFile([string]$filePath) {\\\\r\\\\n        if (-Not (Test-Path -Path $filePath)) {\\\\r\\\\n            throw \\\\\\\"File not found: $filePath\\\\\\\"\\\\r\\\\n        }\\\\r\\\\n        $json = Get-Content -Path $filePath -Raw\\\\r\\\\n        $data = $json | ConvertFrom-Json -AsHashtable\\\\r\\\\n        $scheduleData = $data.Schedule\\\\r\\\\n        [Contract]$retval = [Contract]::new($data.FirstName, $data.LastName, $data.Year,$data.MorningCostPerHour, $data.MorningGovSubsidyPerHour, $data.AfternoonCostPerHour, $data.AfternoonGovSubsidyPerHour, $scheduleData)\\\\r\\\\n        return $retval\\\\r\\\\n    }\\\\r\\\\n}\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"ps1\\\",\\r\\n        \\\"type\\\": \\\"code\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/classes/contractps1\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_classes_holidayps1\\\",\\r\\n      \\\"class HoliDay {\\\\r\\\\n    [datetime]$Date\\\\r\\\\n    [string]$Name\\\\r\\\\n\\\\r\\\\n    HoliDay([datetime]$Date, [string]$Name) {\\\\r\\\\n        $this.Date = $Date\\\\r\\\\n        $this.Name = $Name\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n# [HoliDay] $holiday = [HoliDay]::new((Get-Date -Year 2021 -Month 1 -Day 1), \\\\\\\"New Year's Day\\\\\\\")\\\\r\\\\n# Write-Output \\\\\\\"$($holiday.Date) - $($holiday.Name)\\\\\\\"\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"ps1\\\",\\r\\n        \\\"type\\\": \\\"code\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/classes/holidayps1\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_config_contractjson\\\",\\r\\n      \\\"{\\\\r\\\\n  \\\\\\\"FirstName\\\\\\\": \\\\\\\"Daniel\\\\\\\",\\\\r\\\\n  \\\\\\\"LastName\\\\\\\": \\\\\\\"Testuser\\\\\\\",\\\\r\\\\n  \\\\\\\"Year\\\\\\\": \\\\\\\"2025\\\\\\\",\\\\r\\\\n  \\\\\\\"MorningCostPerHour\\\\\\\": 6.0,\\\\r\\\\n  \\\\\\\"MorningGovSubsidyPerHour\\\\\\\": 4.5,\\\\r\\\\n  \\\\\\\"AfternoonCostPerHour\\\\\\\": 5.0,\\\\r\\\\n  \\\\\\\"AfternoonGovSubsidyPerHour\\\\\\\": 0.0,\\\\r\\\\n  \\\\\\\"Schedule\\\\\\\": {\\\\r\\\\n    \\\\\\\"Monday\\\\\\\": {\\\\r\\\\n      \\\\\\\"Start\\\\\\\": \\\\\\\"08:00 AM\\\\\\\",\\\\r\\\\n      \\\\\\\"End\\\\\\\": \\\\\\\"03:00 PM\\\\\\\"\\\\r\\\\n    },\\\\r\\\\n    \\\\\\\"Tuesday\\\\\\\": {\\\\r\\\\n      \\\\\\\"Start\\\\\\\": \\\\\\\"08:00 AM\\\\\\\",\\\\r\\\\n      \\\\\\\"End\\\\\\\": \\\\\\\"03:00 PM\\\\\\\"\\\\r\\\\n    },\\\\r\\\\n    \\\\\\\"Wednesday\\\\\\\": {\\\\r\\\\n      \\\\\\\"Start\\\\\\\": \\\\\\\"08:00 AM\\\\\\\",\\\\r\\\\n      \\\\\\\"End\\\\\\\": \\\\\\\"03:00 PM\\\\\\\"\\\\r\\\\n    },\\\\r\\\\n    \\\\\\\"Thursday\\\\\\\": {\\\\r\\\\n      \\\\\\\"Start\\\\\\\": \\\\\\\"08:00 AM\\\\\\\",\\\\r\\\\n      \\\\\\\"End\\\\\\\": \\\\\\\"03:00 PM\\\\\\\"\\\\r\\\\n    }\\\\r\\\\n  }\\\\r\\\\n}\\\\r\\\\n\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"json\\\",\\r\\n        \\\"type\\\": \\\"config\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/config/contractjson\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_data_contractResultjson\\\",\\r\\n      \\\"[\\\\r\\\\n  {\\\\r\\\\n    \\\\\\\"Month\\\\\\\": \\\\\\\"2025-01\\\\\\\",\\\\r\\\\n    \\\\\\\"Days\\\\\\\": 16,\\\\r\\\\n    \\\\\\\"TotalCost\\\\\\\": 280.0,\\\\r\\\\n    \\\\\\\"TotalSubsidy\\\\\\\": 360.0\\\\r\\\\n  },\\\\r\\\\n  {\\\\r\\\\n    \\\\\\\"Month\\\\\\\": \\\\\\\"2025-02\\\\\\\",\\\\r\\\\n    \\\\\\\"Days\\\\\\\": 16,\\\\r\\\\n    \\\\\\\"TotalCost\\\\\\\": 280.0,\\\\r\\\\n    \\\\\\\"TotalSubsidy\\\\\\\": 360.0\\\\r\\\\n  },\\\\r\\\\n  {\\\\r\\\\n    \\\\\\\"Month\\\\\\\": \\\\\\\"2025-03\\\\\\\",\\\\r\\\\n    \\\\\\\"Days\\\\\\\": 17,\\\\r\\\\n    \\\\\\\"TotalCost\\\\\\\": 297.5,\\\\r\\\\n    \\\\\\\"TotalSubsidy\\\\\\\": 382.5\\\\r\\\\n  },\\\\r\\\\n  {\\\\r\\\\n    \\\\\\\"Month\\\\\\\": \\\\\\\"2025-04\\\\\\\",\\\\r\\\\n    \\\\\\\"Days\\\\\\\": 17,\\\\r\\\\n    \\\\\\\"TotalCost\\\\\\\": 297.5,\\\\r\\\\n    \\\\\\\"TotalSubsidy\\\\\\\": 382.5\\\\r\\\\n  },\\\\r\\\\n  {\\\\r\\\\n    \\\\\\\"Month\\\\\\\": \\\\\\\"2025-05\\\\\\\",\\\\r\\\\n    \\\\\\\"Days\\\\\\\": 15,\\\\r\\\\n    \\\\\\\"TotalCost\\\\\\\": 262.5,\\\\r\\\\n    \\\\\\\"TotalSubsidy\\\\\\\": 337.5\\\\r\\\\n  },\\\\r\\\\n  {\\\\r\\\\n    \\\\\\\"Month\\\\\\\": \\\\\\\"2025-06\\\\\\\",\\\\r\\\\n    \\\\\\\"Days\\\\\\\": 15,\\\\r\\\\n    \\\\\\\"TotalCost\\\\\\\": 262.5,\\\\r\\\\n    \\\\\\\"TotalSubsidy\\\\\\\": 337.5\\\\r\\\\n  },\\\\r\\\\n  {\\\\r\\\\n    \\\\\\\"Month\\\\\\\": \\\\\\\"2025-07\\\\\\\",\\\\r\\\\n    \\\\\\\"Days\\\\\\\": 19,\\\\r\\\\n    \\\\\\\"TotalCost\\\\\\\": 332.5,\\\\r\\\\n    \\\\\\\"TotalSubsidy\\\\\\\": 427.5\\\\r\\\\n  },\\\\r\\\\n  {\\\\r\\\\n    \\\\\\\"Month\\\\\\\": \\\\\\\"2025-08\\\\\\\",\\\\r\\\\n    \\\\\\\"Days\\\\\\\": 16,\\\\r\\\\n    \\\\\\\"TotalCost\\\\\\\": 280.0,\\\\r\\\\n    \\\\\\\"TotalSubsidy\\\\\\\": 360.0\\\\r\\\\n  },\\\\r\\\\n  {\\\\r\\\\n    \\\\\\\"Month\\\\\\\": \\\\\\\"2025-09\\\\\\\",\\\\r\\\\n    \\\\\\\"Days\\\\\\\": 18,\\\\r\\\\n    \\\\\\\"TotalCost\\\\\\\": 315.0,\\\\r\\\\n    \\\\\\\"TotalSubsidy\\\\\\\": 405.0\\\\r\\\\n  },\\\\r\\\\n  {\\\\r\\\\n    \\\\\\\"Month\\\\\\\": \\\\\\\"2025-10\\\\\\\",\\\\r\\\\n    \\\\\\\"Days\\\\\\\": 18,\\\\r\\\\n    \\\\\\\"TotalCost\\\\\\\": 315.0,\\\\r\\\\n    \\\\\\\"TotalSubsidy\\\\\\\": 405.0\\\\r\\\\n  },\\\\r\\\\n  {\\\\r\\\\n    \\\\\\\"Month\\\\\\\": \\\\\\\"2025-11\\\\\\\",\\\\r\\\\n    \\\\\\\"Days\\\\\\\": 16,\\\\r\\\\n    \\\\\\\"TotalCost\\\\\\\": 280.0,\\\\r\\\\n    \\\\\\\"TotalSubsidy\\\\\\\": 360.0\\\\r\\\\n  },\\\\r\\\\n  {\\\\r\\\\n    \\\\\\\"Month\\\\\\\": \\\\\\\"2025-12\\\\\\\",\\\\r\\\\n    \\\\\\\"Days\\\\\\\": 17,\\\\r\\\\n    \\\\\\\"TotalCost\\\\\\\": 297.5,\\\\r\\\\n    \\\\\\\"TotalSubsidy\\\\\\\": 382.5\\\\r\\\\n  }\\\\r\\\\n]\\\\r\\\\n\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"json\\\",\\r\\n        \\\"type\\\": \\\"config\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/data/contractResultjson\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_functions_bankholidaysps1\\\",\\r\\n      \\\". \\\\\\\"$PSScriptRoot\\\\\\\\..\\\\\\\\classes\\\\\\\\holiday.ps1\\\\\\\"\\\\r\\\\n\\\\r\\\\nfunction Get-RestDateFormat {\\\\r\\\\n    return \\\\\\\"yyyy-MM-dd\\\\\\\"\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n# this function retrieves Austrian bank holidays from openholidaysapi.org\\\\r\\\\nfunction Get-AustrianBankHolidays {\\\\r\\\\n    # PSScriptAnalyzer rule suppression because it returns an array of objects\\\\r\\\\n    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseSingularNouns', 'Get-AustrianBankHolidays')]\\\\r\\\\n    param (\\\\r\\\\n        [Parameter(Mandatory=$true)]\\\\r\\\\n        [datetime]$StartDate,\\\\r\\\\n        [Parameter(Mandatory=$true)]\\\\r\\\\n        [datetime]$EndDate\\\\r\\\\n    )\\\\r\\\\n\\\\r\\\\n    $restDateFormat = Get-RestDateFormat\\\\r\\\\n    $startDateString = $StartDate.ToString($restDateFormat)\\\\r\\\\n    $endDateString = $EndDate.ToString($restDateFormat)\\\\r\\\\n\\\\r\\\\n    Write-Output \\\\\\\"Getting Austrian bank holidays from $startDateString to $endDateString from openholidaysapi.org\\\\\\\"\\\\r\\\\n    $url = \\\\\\\"https://openholidaysapi.org/PublicHolidays?countryIsoCode=AT&languageIsoCode=DE&validFrom=$startDateString&validTo=$endDateString\\\\\\\"\\\\r\\\\n    Write-Output $url\\\\r\\\\n    try {\\\\r\\\\n        $response = Invoke-RestMethod -Uri $url -Method Get\\\\r\\\\n    } catch {\\\\r\\\\n        Write-Error \\\\\\\"Failed to retrieve data from API: $_\\\\\\\"\\\\r\\\\n        return\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    $holidayArray = @()\\\\r\\\\n    $response | ForEach-Object {\\\\r\\\\n        $holidayObject =[HoliDay]::new([datetime]$_.startDate, [string]$_.name.text)\\\\r\\\\n        $holidayArray += $holidayObject\\\\r\\\\n    }\\\\r\\\\n    return $holidayArray\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n# Get-AustrianBankHolidays -StartDate (Get-Date -Year 2021 -Month 1 -Day 1) -EndDate (Get-Date -Year 2021 -Month 12 -Day 31)\\\\r\\\\n\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"ps1\\\",\\r\\n        \\\"type\\\": \\\"code\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/functions/bankholidaysps1\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_functions_Get-ApiTokenps1\\\",\\r\\n      \\\"# Ensure you have the PnP PowerShell module installed\\\\r\\\\nif (-not (Get-Module -ListAvailable -Name PnP.PowerShell)) {\\\\r\\\\n    Install-Module PnP.PowerShell -Scope CurrentUser -AllowPrerelease -SkipPublisherCheck\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\nfunction Get-ApiToken {\\\\r\\\\n    if (-not $env:CHATAPI_TOKEN) {\\\\r\\\\n        $secretUrl = git remote get-url origin\\\\r\\\\n        $apiSecret = Get-PnPStoredCredential -Name $secretUrl\\\\r\\\\n        if (-not $apiSecret) {\\\\r\\\\n            throw \\\\\\\"API key is not set. runSetAPISecret.ps1 or set the CHATAPI_TOKEN environment variable.\\\\\\\"\\\\r\\\\n        }\\\\r\\\\n        # Convert the secure string to plain text it it is just a PAT so not too worried about it\\\\r\\\\n        return ConvertFrom-SecureString -SecureString $apiSecret.Password -AsPlainText\\\\r\\\\n    } else {\\\\r\\\\n        return $env:CHATAPI_TOKEN  # Ensure you have set this environment variable\\\\r\\\\n    }\\\\r\\\\n}\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"ps1\\\",\\r\\n        \\\"type\\\": \\\"code\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/functions/Get-ApiTokenps1\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_functions_Invoke-ChatCompletionps1\\\",\\r\\n      \\\"# This function sends a chat completion request to the OpenAI API.\\\\r\\\\n# It takes a prompt, API key, base URL, and model as parameters.\\\\r\\\\n    function Invoke-ChatCompletion {\\\\r\\\\n    param (\\\\r\\\\n        [string]$Prompt,\\\\r\\\\n        [string]$ApiKey,\\\\r\\\\n        [string]$BaseUrl,\\\\r\\\\n        [string]$Model = \\\\\\\"o3-mini\\\\\\\"\\\\r\\\\n    )\\\\r\\\\n\\\\r\\\\n    # No manual escaping is needed when using ConvertTo-Json,\\\\r\\\\n    # just trim the prompt to remove any leading or trailing whitespace.\\\\r\\\\n    $Prompt = ConvertTo-Json $Prompt.Trim()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n    # Define the request payload\\\\r\\\\n    $Body = @{\\\\r\\\\n        messages = @(\\\\r\\\\n            @{ role = \\\\\\\"system\\\\\\\"; content = \\\\\\\"\\\\\\\" },\\\\r\\\\n            @{ role = \\\\\\\"user\\\\\\\"; content = $Prompt }\\\\r\\\\n        )\\\\r\\\\n        model = $Model\\\\r\\\\n    } | ConvertTo-Json -Depth 10\\\\r\\\\n\\\\r\\\\n    # Define headers\\\\r\\\\n    $Headers = @{\\\\r\\\\n        \\\\\\\"Authorization\\\\\\\" = \\\\\\\"Bearer $ApiKey\\\\\\\"\\\\r\\\\n        \\\\\\\"Content-Type\\\\\\\" = \\\\\\\"application/json\\\\\\\"\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    # Make the API request\\\\r\\\\n    try {\\\\r\\\\n        $url = \\\\\\\"$BaseUrl/chat/completions\\\\\\\"\\\\r\\\\n        Write-Output \\\\\\\"Request URL: $url\\\\\\\"\\\\r\\\\n        $Response = Invoke-RestMethod -Uri $url  -Method Post -Headers $Headers -Body $Body\\\\r\\\\n\\\\r\\\\n        return $Response.choices[0].message.content\\\\r\\\\n    } catch {\\\\r\\\\n        Write-Error \\\\\\\"The sample encountered an error: $_\\\\\\\"\\\\r\\\\n        Write-Error \\\\\\\"with the following parameters:\\\\\\\"\\\\r\\\\n        Write-Error \\\\\\\"Prompt: $Prompt\\\\\\\"\\\\r\\\\n        Write-Error \\\\\\\"BaseUrl: $BaseUrl\\\\\\\"\\\\r\\\\n        throw\\\\r\\\\n    }\\\\r\\\\n}\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"ps1\\\",\\r\\n        \\\"type\\\": \\\"code\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/functions/Invoke-ChatCompletionps1\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_scripts_generateWorkdaysReportps1\\\",\\r\\n      \\\"# generateWorkdaysReport.ps1\\\\r\\\\n\\\\r\\\\n. ./Modules/workday.ps1\\\\r\\\\n\\\\r\\\\n$workdaysByMonth = Get-Content -Path \\\\\\\"data/workdaysByMonth.json\\\\\\\" | ConvertFrom-Json\\\\r\\\\n\\\\r\\\\n$output = \\\\\\\"| Month       | Workdays |\\\\\\\\n|-------------|----------|\\\\\\\\n\\\\\\\"\\\\r\\\\nforeach ($month in $workdaysByMonth) {\\\\r\\\\n    $output += \\\\\\\"| $($month.Month) | $($month.Count) |\\\\\\\\n\\\\\\\"\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n$output | Set-Content -Path \\\\\\\"output.md\\\\\\\"\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"ps1\\\",\\r\\n        \\\"type\\\": \\\"code\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/scripts/generateWorkdaysReportps1\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_scripts_Pathsps1\\\",\\r\\n      \\\"# Show-SortedPaths function\\\\r\\\\n# This script sorts the system PATH variable and displays it in color-coded format.\\\\r\\\\nfunction Show-SortedPath {\\\\r\\\\n    $paths = $env:Path -split ';'\\\\r\\\\n\\\\r\\\\n    $sortedPaths = $paths | Sort-Object\\\\r\\\\n\\\\r\\\\n    foreach ($path in $sortedPaths) {\\\\r\\\\n        switch -Regex ($path) {\\\\r\\\\n            '^C:\\\\\\\\\\\\\\\\Program Files' { Write-Host $path -ForegroundColor Blue; break }\\\\r\\\\n            '^C:\\\\\\\\\\\\\\\\Users' { Write-Host $path -ForegroundColor Yellow; break }\\\\r\\\\n            '^C:\\\\\\\\\\\\\\\\Windows' { Write-Host $path -ForegroundColor Green; break }\\\\r\\\\n            default { Write-Host $path -ForegroundColor White }\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n# Set-Path function\\\\r\\\\n# This function sets a new path variable to the specified path.\\\\r\\\\nfunction Set-Path {\\\\r\\\\n    [CmdletBinding(SupportsShouldProcess)]\\\\r\\\\n    param (\\\\r\\\\n        [string]$newPath\\\\r\\\\n    )\\\\r\\\\n\\\\r\\\\n    # Set a new path variable to the specified path\\\\r\\\\n    if ($PSCmdlet.ShouldProcess(\\\\\\\"Adding $newPath to PATH\\\\\\\")) {\\\\r\\\\n        if ($env:Path -notmatch [regex]::Escape($newPath)) {\\\\r\\\\n            $env:Path += \\\\\\\";$newPath\\\\\\\"\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"ps1\\\",\\r\\n        \\\"type\\\": \\\"code\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/scripts/Pathsps1\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_scripts_pslintps1\\\",\\r\\n      \\\"\\\\r\\\\n# This script is used to lint PowerShell scripts using PSScriptAnalyzer.\\\\r\\\\n# It checks if PSScriptAnalyzer is installed, installs it if not, and then\\\\r\\\\n# runs the analysis on all PowerShell scripts in the current directory and\\\\r\\\\n\\\\r\\\\n# Check if PSScriptAnalyzer is installed, if not install it.\\\\r\\\\nif (-not (Get-Module -ListAvailable -Name PSScriptAnalyzer)) {\\\\r\\\\n    Set-PSRepository PSGallery -InstallationPolicy Trusted\\\\r\\\\n    Install-Module PSScriptAnalyzer -ErrorAction Stop\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n# Lint the PowerShell scripts.\\\\r\\\\nInvoke-ScriptAnalyzer -Path *.ps1 -Recurse -Outvariable issues\\\\r\\\\n\\\\r\\\\n$errors   = $issues.Where({$_.Severity -eq 'Error'})\\\\r\\\\n$warnings = $issues.Where({$_.Severity -eq 'Warning'})\\\\r\\\\nif ($errors) {\\\\r\\\\n    Write-Error \\\\\\\"There were $($errors.Count) errors and $($warnings.Count) warnings total.\\\\\\\"\\\\r\\\\n} else {\\\\r\\\\n    Write-Output \\\\\\\"There were $($errors.Count) errors and $($warnings.Count) warnings total.\\\\\\\"\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n# Convert the issues to a markdown table\\\\r\\\\n$markdownTable = @\\\\\\\"\\\\r\\\\n| Severity | Line | Message |\\\\r\\\\n|----------|------|---------|\\\\r\\\\n\\\\\\\"@\\\\r\\\\n\\\\r\\\\nforeach ($issue in $issues) {\\\\r\\\\n    $markdownTable += \\\\\\\"| $($issue.Severity) | $($issue.Line) | $($issue.Message) |`n\\\\\\\"\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n# Output the markdown table to the step summary\\\\r\\\\nWrite-Output $markdownTable\\\\r\\\\n\\\\r\\\\n# Fail the build if there are any errors in the script files\\\\r\\\\nif ($errors) {\\\\r\\\\n    Write-Error \\\\\\\"Errors found in script files.\\\\\\\"\\\\r\\\\n    exit 1\\\\r\\\\n} else {\\\\r\\\\n    Write-Output \\\\\\\"No errors found in script files.\\\\\\\"\\\\r\\\\n}\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"ps1\\\",\\r\\n        \\\"type\\\": \\\"code\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/scripts/pslintps1\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_tests_gitignore\\\",\\r\\n      \\\"/test_person.json\\\\r\\\\n\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"gitignore\\\",\\r\\n        \\\"type\\\": \\\"other\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/tests/gitignore\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_tests_bankholidaystestsps1\\\",\\r\\n      \\\"# Modules/bankholidays.Tests.ps1\\\\r\\\\n\\\\r\\\\nDescribe \\\\\\\"Get-RestDateFormat\\\\\\\" {\\\\r\\\\n    BeforeAll {\\\\r\\\\n         # Load the class definition\\\\r\\\\n        # strange handling is required so it works in both environments\\\\r\\\\n        # (VSCode and GitHub Actions)\\\\r\\\\n        $paths = @(\\\\r\\\\n            \\\\\\\"$PSScriptRoot/functions\\\\\\\\bankholidays.ps1\\\\\\\",\\\\r\\\\n            \\\\\\\"$PSScriptRoot/../functions\\\\\\\\bankholidays.ps1\\\\\\\"\\\\r\\\\n        )\\\\r\\\\n\\\\r\\\\n        $foundPath = $paths | Where-Object { Test-Path $_ } | Select-Object -First 1\\\\r\\\\n\\\\r\\\\n        if ($foundPath) {\\\\r\\\\n            . $foundPath\\\\r\\\\n        }\\\\r\\\\n        else {\\\\r\\\\n            throw \\\\\\\"File not found: $($paths -join ', ')\\\\\\\"\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n    It \\\\\\\"should return the correct date format\\\\\\\" {\\\\r\\\\n        $result = Get-RestDateFormat\\\\r\\\\n        $result | Should -Be \\\\\\\"yyyy-MM-dd\\\\\\\"\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\nDescribe \\\\\\\"Get-AustrianBankHolidays\\\\\\\" {\\\\r\\\\n    BeforeAll {\\\\r\\\\n        . \\\\\\\"$PSScriptRoot\\\\\\\\..\\\\\\\\functions\\\\\\\\bankholidays.ps1\\\\\\\"\\\\r\\\\n    }\\\\r\\\\n    Context \\\\\\\"When called with valid dates\\\\\\\" {\\\\r\\\\n        It \\\\\\\"Should return an array of holiday objects\\\\\\\" {\\\\r\\\\n            $result = Get-AustrianBankHolidays -StartDate \\\\\\\"2023-01-01\\\\\\\" -EndDate \\\\\\\"2023-12-31\\\\\\\"\\\\r\\\\n            $result.Count | Should -Be 15\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    Context \\\\\\\"When API call fails\\\\\\\" {\\\\r\\\\n        It \\\\\\\"Should write an error message and return nothing\\\\\\\" {\\\\r\\\\n            { Get-AustrianBankHolidays -StartDate \\\\\\\"XXX\\\\\\\" -EndDate \\\\\\\"2023-12-31\\\\\\\" } | Should -Throw\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n}\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"ps1\\\",\\r\\n        \\\"type\\\": \\\"code\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/tests/bankholidaystestsps1\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_tests_contractTestsps1\\\",\\r\\n      \\\"# classes/contract.Tests.ps1\\\\r\\\\n\\\\r\\\\nDescribe 'Contract Class' {\\\\r\\\\n    BeforeAll {\\\\r\\\\n        # Load the class definition\\\\r\\\\n        # strange handling is required so it works in both environments\\\\r\\\\n        # (VSCode and GitHub Actions)\\\\r\\\\n        $paths = @(\\\\r\\\\n            \\\\\\\"$PSScriptRoot/classes/contract.ps1\\\\\\\",\\\\r\\\\n            \\\\\\\"$PSScriptRoot/../classes/contract.ps1\\\\\\\"\\\\r\\\\n        )\\\\r\\\\n\\\\r\\\\n        $foundPath = $paths | Where-Object { Test-Path $_ } | Select-Object -First 1\\\\r\\\\n\\\\r\\\\n        if ($foundPath) {\\\\r\\\\n            . $foundPath\\\\r\\\\n        }\\\\r\\\\n        else {\\\\r\\\\n            throw \\\\\\\"File not found: $($paths -join ', ')\\\\\\\"\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    Context 'Constructor' {\\\\r\\\\n        It 'should create an instance of Contract with correct properties' {\\\\r\\\\n            $schedule = @{\\\\r\\\\n                Monday = @{ Start = \\\\\\\"08:00 AM\\\\\\\"; End = \\\\\\\"04:00 PM\\\\\\\" }\\\\r\\\\n                Tuesday = @{ Start = \\\\\\\"08:00 AM\\\\\\\"; End = \\\\\\\"04:00 PM\\\\\\\" }\\\\r\\\\n            }\\\\r\\\\n            $contract = [Contract]::new(\\\\\\\"John\\\\\\\", \\\\\\\"Doe\\\\\\\", \\\\\\\"2023\\\\\\\", 20.0, 5.0, 25.0, 10.0, $schedule)\\\\r\\\\n            $contract | Should -Not -BeNull\\\\r\\\\n            $contract.FirstName | Should -Be \\\\\\\"John\\\\\\\"\\\\r\\\\n            $contract.LastName | Should -Be \\\\\\\"Doe\\\\\\\"\\\\r\\\\n            $contract.Year | Should -Be \\\\\\\"2023\\\\\\\"\\\\r\\\\n            $contract.MorningCostPerHour | Should -Be 20.0\\\\r\\\\n            $contract.MorningGovSubsidyPerHour | Should -Be 5.0\\\\r\\\\n            $contract.AfternoonCostPerHour | Should -Be 25.0\\\\r\\\\n            $contract.AfternoonGovSubsidyPerHour | Should -Be 10.0\\\\r\\\\n            $contract.Schedule | Should -Be $schedule\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    Context 'Calculate Method' {\\\\r\\\\n        It 'should calculate monthly costs correctly' {\\\\r\\\\n            $schedule = @{\\\\r\\\\n                Monday = @{ Start = \\\\\\\"08:00 AM\\\\\\\"; End = \\\\\\\"04:00 PM\\\\\\\" }\\\\r\\\\n                Tuesday = @{ Start = \\\\\\\"08:00 AM\\\\\\\"; End = \\\\\\\"04:00 PM\\\\\\\" }\\\\r\\\\n            }\\\\r\\\\n            $contract = [Contract]::new(\\\\\\\"John\\\\\\\", \\\\\\\"Doe\\\\\\\", \\\\\\\"2023\\\\\\\", 20.0, 5.0, 25.0, 10.0, $schedule)\\\\r\\\\n            $monthlyCosts = $contract.Calculate()\\\\r\\\\n            $monthlyCosts | Should -Not -BeNull\\\\r\\\\n            $monthlyCosts.Count | Should -BeGreaterThan 0\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    Context 'LoadFromFile Method' {\\\\r\\\\n        It 'should load contract from file correctly' {\\\\r\\\\n\\\\r\\\\n            # attention case sensitive on linux runner\\\\r\\\\n            $paths = @(\\\\r\\\\n                \\\\\\\"$PSScriptRoot/config/contract.json\\\\\\\",\\\\r\\\\n                \\\\\\\"$PSScriptRoot/../config/contract.json\\\\\\\",\\\\r\\\\n                \\\\\\\"$PSScriptRoot/config/Contract.json\\\\\\\",\\\\r\\\\n                \\\\\\\"$PSScriptRoot/../config/Contract.json\\\\\\\"\\\\r\\\\n            )\\\\r\\\\n\\\\r\\\\n            $foundPath = $paths | Where-Object { Test-Path $_ } | Select-Object -First 1\\\\r\\\\n\\\\r\\\\n            if ($foundPath) {\\\\r\\\\n                $filePath = $foundPath\\\\r\\\\n                Write-Output \\\\\\\"File found: $filePath\\\\\\\"\\\\r\\\\n            }\\\\r\\\\n            else {\\\\r\\\\n                throw \\\\\\\"File not found: $($paths -join ', ')\\\\\\\"\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            # $filePath = \\\\\\\"$PSScriptRoot/config/contract.json\\\\\\\"\\\\r\\\\n            $contract = [Contract]::LoadFromFile($filePath)\\\\r\\\\n            $contract | Should -Not -BeNull\\\\r\\\\n            $contract.FirstName | Should -Be \\\\\\\"Daniel\\\\\\\"\\\\r\\\\n            $contract.LastName | Should -Be \\\\\\\"Testuser\\\\\\\"\\\\r\\\\n            $contract.Year | Should -Be \\\\\\\"2025\\\\\\\"\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n}\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"ps1\\\",\\r\\n        \\\"type\\\": \\\"code\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/tests/contractTestsps1\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"id\\\": [\\r\\n      \\\"file_C:_repos_danielsiegl_powershellplayground_tests_holidayTestsps1\\\",\\r\\n      \\\"# classes/holiday.Tests.ps1\\\\r\\\\n\\\\r\\\\nDescribe 'HoliDay Class' {\\\\r\\\\n    BeforeAll {\\\\r\\\\n        # Load the class definition\\\\r\\\\n        # strange handling is required so it works in both environments\\\\r\\\\n        # (VSCode and GitHub Actions)\\\\r\\\\n        $paths = @(\\\\r\\\\n            \\\\\\\"$PSScriptRoot/classes/holiday.ps1\\\\\\\",\\\\r\\\\n            \\\\\\\"$PSScriptRoot/../classes/holiday.ps1\\\\\\\"\\\\r\\\\n        )\\\\r\\\\n\\\\r\\\\n        $foundPath = $paths | Where-Object { Test-Path $_ } | Select-Object -First 1\\\\r\\\\n\\\\r\\\\n        if ($foundPath) {\\\\r\\\\n            . $foundPath\\\\r\\\\n        }\\\\r\\\\n        else {\\\\r\\\\n            throw \\\\\\\"File not found: $($paths -join ', ')\\\\\\\"\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n    Context 'Constructor' {\\\\r\\\\n        It 'should create an instance of HoliDay with correct properties' {\\\\r\\\\n            $date = Get-Date -Year 2021 -Month 1 -Day 1\\\\r\\\\n            $name = \\\\\\\"New Year's Day\\\\\\\"\\\\r\\\\n            $holiday = [HoliDay]::new($date, $name)\\\\r\\\\n            $holiday | Should -Not -BeNull\\\\r\\\\n            $holiday.Date | Should -Be $date\\\\r\\\\n            $holiday.Name | Should -Be $name\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    Context 'Properties' {\\\\r\\\\n        It 'should allow getting and setting Date property' {\\\\r\\\\n            $holiday = [HoliDay]::new((Get-Date), \\\\\\\"Test Holiday\\\\\\\")\\\\r\\\\n            $newDate = Get-Date -Year 2022 -Month 12 -Day 25\\\\r\\\\n            $holiday.Date = $newDate\\\\r\\\\n\\\\r\\\\n            $holiday.Date | Should -Be $newDate\\\\r\\\\n        }\\\\r\\\\n\\\\r\\\\n        It 'should allow getting and setting Name property' {\\\\r\\\\n            $holiday = [HoliDay]::new((Get-Date), \\\\\\\"Test Holiday\\\\\\\")\\\\r\\\\n            $newName = \\\\\\\"Christmas\\\\\\\"\\\\r\\\\n            $holiday.Name = $newName\\\\r\\\\n\\\\r\\\\n            $holiday.Name | Should -Be $newName\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n}\\\",\\r\\n      {\\r\\n        \\\"extension\\\": \\\"ps1\\\",\\r\\n        \\\"type\\\": \\\"code\\\",\\r\\n        \\\"path\\\": \\\"C:/repos/danielsiegl/powershellplayground/tests/holidayTestsps1\\\"\\r\\n      }\\r\\n    ],\\r\\n    \\\"text\\\": null,\\r\\n    \\\"metadata\\\": null\\r\\n  }\\r\\n]\\r\\n\",\r\n      {\r\n        \"extension\": \"json\",\r\n        \"type\": \"config\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/git_repo_docsjson\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_READMEmd\",\r\n      \"# PowerShell Playground\\r\\n\\r\\nWelcome to the PowerShell Playground repository! This is a personal space dedicated to experimenting with PowerShell scripts, modules, and various automation tasks. Whether you're a seasoned PowerShell user or just starting out, this repository offers a variety of resources to explore and enhance your scripting skills.\\r\\n\\r\\n## Table of Contents\\r\\n\\r\\n- [Introduction](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#introduction)\\r\\n- [Repository Structure](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#repository-structure)\\r\\n- [Getting Started](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#getting-started)\\r\\n- [Scripts Overview](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#scripts-overview)\\r\\n- [Modules](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#modules)\\r\\n- [Contributing](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#contributing)\\r\\n- [License](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#license)\\r\\n\\r\\n## Introduction\\r\\n\\r\\nPowerShell is a powerful scripting language and command-line shell designed especially for system administration. This repository serves as a sandbox to test, learn, and develop PowerShell scripts and modules. Feel free to explore the content, suggest improvements, or contribute your own scripts.\\r\\n\\r\\n## Repository Structure\\r\\n\\r\\nThe repository is organized into the following directories:\\r\\n\\r\\n- **classes/**: Contains PowerShell class definitions used across various scripts.\\r\\n- **config/**: Configuration files that support the scripts and modules.\\r\\n- **data/**: Sample data files utilized by the scripts for processing and testing.\\r\\n- **functions/**: Reusable PowerShell functions that can be imported and used in different scripts.\\r\\n- **scripts/**: Standalone PowerShell scripts demonstrating specific tasks or solutions.\\r\\n- **tests/**: Test scripts to validate the functionality of modules and functions.\\r\\n- **.github/workflows/**: GitHub Actions workflows for CI/CD pipelines.\\r\\n\\r\\n## Getting Started\\r\\n\\r\\nTo get started with the PowerShell Playground:\\r\\n\\r\\n1. **Clone the Repository**:\\r\\n    \\r\\n    ```bash\\r\\n    git clone https://github.com/danielsiegl/powershellplayground.git\\r\\n    cd powershellplayground\\r\\n    ```\\r\\n    \\r\\n2. **Explore the Directories**: Navigate through the directories to understand the structure and content.\\r\\n    \\r\\n3. **Run Sample Scripts**: Inside the `scripts/` directory, you'll find various PowerShell scripts. Open and run them using PowerShell to see them in action.\\r\\n    \\r\\n4. **Utilize Functions**: The `functions/` directory contains reusable functions. You can import these into your own scripts as needed.\\r\\n    \\r\\n\\r\\n## Scripts Overview\\r\\n\\r\\nHere are some notable scripts included in this repository:\\r\\n\\r\\n- **calculateContract.ps1**: A script to calculate contract details based on provided data. This script demonstrates data processing and output formatting in PowerShell.\\r\\n\\r\\n## Modules\\r\\n\\r\\nThe repository includes custom modules located in the `functions/` directory. These modules encapsulate specific functionalities and can be imported into your PowerShell session or scripts:\\r\\n\\r\\n```powershell\\r\\nImport-Module -Name .\\\\functions\\\\YourModuleName.psm1\\r\\n```\\r\\n\\r\\nReplace `YourModuleName.psm1` with the actual module name you wish to import.\\r\\n\\r\\n## Contributing\\r\\n\\r\\nContributions are welcome! If you have scripts, functions, or modules that you believe would benefit others, feel free to fork the repository and submit a pull request. Please ensure that your contributions adhere to the following guidelines:\\r\\n\\r\\n- Follow the existing directory structure.\\r\\n- Include comments and documentation within your scripts.\\r\\n- Test your scripts for functionality and reliability.\\r\\n\\r\\n## License\\r\\n\\r\\nThis project is licensed under the MIT License. For more details, refer to the `LICENSE` file in the repository.\\r\\n\\r\\n---\\r\\n\\r\\nThank you for visiting the PowerShell Playground. Happy scripting!\\r\\n\\r\\n\\r\\n\",\r\n      {\r\n        \"extension\": \"md\",\r\n        \"type\": \"doc\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/READMEmd\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_runOpenAIModelsps1\",\r\n      \"# check for pwsh\\r\\nif ($PSVersionTable.PSEdition -ne \\\"Core\\\") {\\r\\n    throw  \\\"This script is intended to be run in PowerShell Core (pwsh).\\\"\\r\\n}\\r\\n\\r\\n# Install the required module if not installed\\r\\n# Install-Module -Name Microsoft.PowerShell.Utility -Force\\r\\n. .\\\\functions\\\\Get-ApiToken.ps1\\r\\n. .\\\\functions\\\\Invoke-ChatCompletion.ps1\\r\\n\\r\\n$baseUrl = \\\"https://api.openai.com/v1\\\"  #\\\"https://models.inference.ai.azure.com\\\"\\r\\n$apiKey = Get-ApiToken  # Ensure you have set this environment variable\\r\\n$model = \\\"o3-mini\\\" #\\\"4o-mini\\\" #\\\"gpt-4o\\\"  # Specify the model you want to use\\r\\n\\r\\n$prompt = \\\"What is the capital of France?\\\"\\r\\n\\r\\n# Example usage\\r\\nWrite-Output \\\"Prompt: $prompt\\\"\\r\\n$ResponseMessage = Invoke-ChatCompletion -Prompt $prompt -ApiKey $apiKey -BaseUrl $baseUrl -Model $model\\r\\nWrite-Output \\\"$($ResponseMessage[0])\\\"\\r\\nWrite-Output \\\"Response: $($ResponseMessage[1])\\\"\\r\\n\",\r\n      {\r\n        \"extension\": \"ps1\",\r\n        \"type\": \"code\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/runOpenAIModelsps1\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_runSetAPISecretps1\",\r\n      \"# This script sets the API secret for the GitHub repository using PnP PowerShell.\\r\\n\\r\\n# Ensure you have the PnP PowerShell module installed\\r\\nif (-not (Get-Module -ListAvailable -Name PnP.PowerShell)) {\\r\\n    Install-Module PnP.PowerShell -Scope CurrentUser -AllowPrerelease -SkipPublisherCheck\\r\\n}\\r\\n\\r\\n# Ask the User for the API secret\\r\\nWrite-Output \\\"Please enter your GitHub API secret: <ctrl+shift+v> to paste\\\"\\r\\n$secretUrl = git remote get-url origin\\r\\nwrite-output \\\"Setting API secret for $secretUrl\\\"\\r\\nAdd-PnPStoredCredential -Name $secretUrl  -Username API_TOKEN -Password (Read-Host -Prompt \\\"Enter your GitHub API secret\\\" -AsSecureString)\",\r\n      {\r\n        \"extension\": \"ps1\",\r\n        \"type\": \"code\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/runSetAPISecretps1\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_github_workflows_Validateyml\",\r\n      \"name: Validate\\r\\non: push\\r\\n\\r\\npermissions:\\r\\n  checks: write\\r\\n  pull-requests: write\\r\\n\\r\\njobs:\\r\\n  powershell-linter:\\r\\n    name: Run Linter\\r\\n    runs-on: ubuntu-latest\\r\\n    defaults:\\r\\n      run:\\r\\n        shell: pwsh\\r\\n    steps:\\r\\n      - uses: actions/checkout@v4\\r\\n      - name: Install PSScriptAnalyzer module\\r\\n        run: |\\r\\n          Set-PSRepository PSGallery -InstallationPolicy Trusted\\r\\n          Install-Module PSScriptAnalyzer -ErrorAction Stop\\r\\n          \\r\\n      - name: Lint with PSScriptAnalyzer\\r\\n        run: |\\r\\n          Invoke-ScriptAnalyzer -Path **\\\\*.ps1 -Recurse -Outvariable issues\\r\\n          $errors   = $issues.Where({$_.Severity -eq 'Error'})\\r\\n          $warnings = $issues.Where({$_.Severity -eq 'Warning'})\\r\\n          if ($errors) {\\r\\n              Write-Error \\\"There were $($errors.Count) errors and $($warnings.Count) warnings total.\\\"\\r\\n          } else {\\r\\n              Write-Output \\\"There were $($errors.Count) errors and $($warnings.Count) warnings total.\\\"\\r\\n          }\\r\\n\\r\\n            if ($issues) {\\r\\n              # Format issues into a markdown table\\r\\n              $markdownTable = \\\"\\\"\\r\\n              $markdownTable += \\\"| Severity | RuleName | ScriptName | Line | Message |`n\\\"\\r\\n              $markdownTable += \\\"|----------|----------|------------|------|---------|`n\\\"\\r\\n\\r\\n              foreach ($issue in $issues) {\\r\\n                $markdownTable += \\\"| $($issue.Severity) |$($issue.RuleName) | $($issue.ScriptName) |$($issue.Line) | $($issue.Message) |`n\\\"\\r\\n              }\\r\\n\\r\\n              # Output the markdown table to the step summary\\r\\n              $markdownTable | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append\\r\\n            }\\r\\n\\r\\n          # Fail the build if there are any errors in the script files\\r\\n          if ($errors) {\\r\\n              Write-Error \\\"Errors found in script files.\\\"\\r\\n              exit 1\\r\\n          } else {\\r\\n              Write-Output \\\"No errors found in script files.\\\"\\r\\n          }\\r\\n\\r\\n  pester-unit-tests:\\r\\n    name: Run Pester\\r\\n    runs-on: ubuntu-latest\\r\\n    defaults:\\r\\n      run:\\r\\n        shell: pwsh\\r\\n    steps:\\r\\n      - name: Check out repository code\\r\\n        uses: actions/checkout@v4\\r\\n      \\r\\n      - name: Perform a Pester Tests\\r\\n        if: always()\\r\\n        run: |\\r\\n          Invoke-Pester ./tests/*.ps1 -Passthru -OutputFile \\\"./test-results/TestResults.xml\\\" -OutputFormat NUnitXml\\r\\n          # don't fail on failed tests\\r\\n          exit 0\\r\\n\\r\\n      - name: Publish Results\\r\\n        uses: EnricoMi/publish-unit-test-result-action@v2\\r\\n        if: always()\\r\\n        with:\\r\\n          files: |\\r\\n            test-results/**/*.xml\",\r\n      {\r\n        \"extension\": \"yml\",\r\n        \"type\": \"other\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/github/workflows/Validateyml\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_obsidian_gitignore\",\r\n      \"/appearance.json\\r\\n/core-plugins.json\\r\\n/workspace.json\\r\\n\",\r\n      {\r\n        \"extension\": \"gitignore\",\r\n        \"type\": \"other\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/obsidian/gitignore\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_obsidian_appjson\",\r\n      \"{\\r\\n  \\\"useMarkdownLinks\\\": true\\r\\n}\",\r\n      {\r\n        \"extension\": \"json\",\r\n        \"type\": \"config\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/obsidian/appjson\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_classes_contractps1\",\r\n      \"# Load the bank holidays function\\r\\n. \\\"$PSScriptRoot/../functions\\\\bankholidays.ps1\\\"\\r\\n\\r\\n# Define the Workday class\\r\\n# This class represents a workday with properties for date, day of the week, start time, and end time.\\r\\nclass Workday {\\r\\n    [string]$Date\\r\\n    [string]$DayOfWeek\\r\\n    [string]$StartTime\\r\\n    [string]$EndTime\\r\\n    [double]$TotalCost\\r\\n    [double]$TotalSubsidy\\r\\n\\r\\n    Workday([string]$date, [string]$dayOfWeek, [string]$startTime, [string]$endTime, [double]$totalCost, [double]$totalSubsidy) {\\r\\n        $this.Date = $date\\r\\n        $this.DayOfWeek = $dayOfWeek\\r\\n        $this.StartTime = $startTime\\r\\n        $this.EndTime = $endTime\\r\\n        $this.TotalCost = $totalCost\\r\\n        $this.TotalSubsidy = $totalSubsidy\\r\\n    }\\r\\n}\\r\\n\\r\\n# Define the Contract class\\r\\n# This class represents a contract with properties for first name, last name, year, cost per hour, subsidy per hour, and schedule.\\r\\nclass MonthlyCost {\\r\\n    [string]$Month\\r\\n    [int] $Days\\r\\n    [double] $TotalCost\\r\\n    [double] $TotalSubsidy\\r\\n\\r\\n    MonthlyCost([string]$month, [int]$days, [double]$totalCost, [double]$totalSubsidy) {\\r\\n        $this.Month = $month\\r\\n        $this.Days = $days\\r\\n        $this.TotalCost = $totalCost\\r\\n        $this.TotalSubsidy = $totalSubsidy\\r\\n    }\\r\\n}\\r\\n\\r\\n# Define the DailyCost class\\r\\n# This class represents the cost calculation for a single day with properties for start time, end time, cost per hour, and government subsidy per hour.\\r\\nclass DailyCost {\\r\\n    [DateTime]$StartTime\\r\\n    [DateTime]$EndTime\\r\\n    [double]$MorningCostPerHour\\r\\n    [double]$AfternoonCostPerHour\\r\\n    [double]$MorningGovSubsidyPerHour\\r\\n    [double]$AfternoonGovSubsidyPerHour\\r\\n    [double]$TotalCost\\r\\n    [double]$TotalSubsidy\\r\\n    # Constructor to initialize the CostWindow object\\r\\n    DailyCost([DateTime]$start, [DateTime]$end, [double]$morningCost, [double]$afternoonCost, [double]$morningGovSubsidy, [double]$afternoonGovSubsidy) {\\r\\n        if ($end -le $start) {\\r\\n            throw \\\"End time must be after start time.\\\"\\r\\n        }\\r\\n        $this.StartTime = $start\\r\\n        $this.EndTime = $end\\r\\n        $this.MorningCostPerHour = $morningCost\\r\\n        $this.AfternoonCostPerHour = $afternoonCost\\r\\n        $this.MorningGovSubsidyPerHour = $morningGovSubsidy\\r\\n        $this.AfternoonGovSubsidyPerHour = $afternoonGovSubsidy\\r\\n        # Calculate costs upon initialization\\r\\n        $this.CalculateCosts()\\r\\n    }\\r\\n\\r\\n    hidden [void] CalculateCosts() {\\r\\n        $sumOfCost = 0\\r\\n        $sumOfSub = 0\\r\\n        $current = $this.StartTime\\r\\n        while ($current -lt $this.EndTime) {\\r\\n            $nextHour = $current.AddHours(1)\\r\\n            if ($current.Hour -ge 8 -and $current.Hour -lt 13) {\\r\\n                # Morning pricing with optional government subsidy\\r\\n                $cost = $this.MorningCostPerHour - $this.MorningGovSubsidyPerHour\\r\\n                $sumOfCost += [math]::Min(($this.EndTime - $current).TotalHours, 1) * [math]::Max($cost, 0)\\r\\n                $sumOfSub += [math]::Min(($this.EndTime - $current).TotalHours, 1) * $this.MorningGovSubsidyPerHour\\r\\n            } elseif ($current.Hour -ge 13 -and $current.Hour -lt 15) {\\r\\n                # Afternoon pricing with optional government subsidy\\r\\n                $cost = $this.AfternoonCostPerHour - $this.AfternoonGovSubsidyPerHour\\r\\n                $sumOfCost += [math]::Min(($this.EndTime - $current).TotalHours, 1) * [math]::Max($cost, 0)\\r\\n                $sumOfSub += [math]::Min(($this.EndTime - $current).TotalHours, 1) * $this.AfternoonGovSubsidyPerHour\\r\\n            }\\r\\n            $current = $nextHour\\r\\n        }\\r\\n        $this.TotalCost = [math]::Round($sumOfCost, 2)\\r\\n        $this.TotalSubsidy = [math]::Round($sumOfSub, 2)\\r\\n    }\\r\\n\\r\\n    [double] GetTotalCost() {\\r\\n        return [math]::Round($this.TotalCost, 2)\\r\\n    }\\r\\n\\r\\n    [double] GetTotalSubsidy() {\\r\\n        return [math]::Round($this.TotalSubsidy, 2)\\r\\n    }\\r\\n}\\r\\n\\r\\n# Define the Contract class\\r\\n# This class represents a contract with properties for first name, last name, year, cost per hour, subsidy per hour, and schedule.\\r\\n\\r\\nclass Contract {\\r\\n    [string]$FirstName\\r\\n    [string]$LastName\\r\\n    [string]$Year\\r\\n    [double]$MorningCostPerHour\\r\\n    [double]$MorningGovSubsidyPerHour\\r\\n    [double]$AfternoonCostPerHour\\r\\n    [double]$AfternoonGovSubsidyPerHour\\r\\n    [hashtable]$Schedule\\r\\n\\r\\n    Contract([string]$firstName, [string]$lastName, [string]$year, [double]$morningCostPerHour, [double]$morningGovSubsidyPerHour, [double]$afternoonCostPerHour, [double]$afternoonGovSubsidyPerHour, [hashtable]$schedule) {\\r\\n        $this.FirstName = $firstName\\r\\n        $this.LastName = $lastName\\r\\n        $this.Year = $year\\r\\n        $this.MorningCostPerHour = $morningCostPerHour\\r\\n        $this.MorningGovSubsidyPerHour = $morningGovSubsidyPerHour\\r\\n        $this.AfternoonCostPerHour = $afternoonCostPerHour\\r\\n        $this.AfternoonGovSubsidyPerHour = $afternoonGovSubsidyPerHour\\r\\n        $this.Schedule = $schedule\\r\\n    }\\r\\n\\r\\n    [System.Collections.Generic.List[MonthlyCost]] Calculate() {\\r\\n        # Function body goes here\\r\\n        # Define the start and end dates for the year\\r\\n        [datetime]$startDateContract = Get-Date -Year $this.Year -Month 1 -Day 1\\r\\n        [datetime]$endDateContract = Get-Date -Year $this.Year -Month 12 -Day 31\\r\\n        [double]$morningRate = $this.MorningCostPerHour\\r\\n        [double]$afternoonRate = $this.AfternoonCostPerHour\\r\\n        [double]$morningGovSubsidy = $this.MorningGovSubsidyPerHour\\r\\n        [double]$afternoonGovSubsidy = $this.AfternoonGovSubsidyPerHour\\r\\n\\r\\n        $holidayArray = Get-AustrianBankHolidays -StartDate $startDateContract -EndDate $endDateContract\\r\\n\\r\\n        # Initialize an array to hold workdays\\r\\n        #[Workday[]]$workdays = @()\\r\\n        [System.Collections.Generic.List[Workday]] $workdays = [System.Collections.Generic.List[Workday]]::new()\\r\\n\\r\\n        # Loop through each day in the year\\r\\n        $currentDate = $startDateContract\\r\\n        while ($currentDate -le $endDateContract) {\\r\\n            $holiday = $holidayArray | Where-Object { $_.Date.Date -eq $currentDate.Date }\\r\\n            if ($holiday) {\\r\\n                $isHoliday = $true\\r\\n            } else {\\r\\n                $isHoliday = $false\\r\\n            }\\r\\n\\r\\n            # Get the day of the week\\r\\n            $dayOfWeek = $currentDate.DayOfWeek\\r\\n\\r\\n            # Check if the day is in the schedule and is not a holiday\\r\\n            if ($this.Schedule.Contains(\\\"$dayOfWeek\\\") -and -not $isHoliday) {\\r\\n\\r\\n                # combine the schedule and person information to calculate the cost\\r\\n                $dailySchedule = $this.Schedule[$dayOfWeek.ToString()]\\r\\n                $start = [DateTime]::ParseExact(\\\"$($currentDate.ToString('yyyy-MM-dd')) $($dailySchedule.Start)\\\", 'yyyy-MM-dd hh:mm tt', $null)\\r\\n                $end = [DateTime]::ParseExact(\\\"$($currentDate.ToString('yyyy-MM-dd')) $($dailySchedule.End)\\\", 'yyyy-MM-dd hh:mm tt', $null)\\r\\n\\r\\n                # Create a CostWindow object to calculate the cost for each workday - bit of an overkill - but the best way to show the usage of the class\\r\\n                $costWindow = [DailyCost]::new($start, $end, $morningRate, $afternoonRate, $morningGovSubsidy, $afternoonGovSubsidy)\\r\\n                # Create a Workday object\\r\\n                $workday = [Workday]::new(\\r\\n                    $currentDate.ToString('yyyy-MM-dd'),\\r\\n                    $dayOfWeek.ToString(),\\r\\n                    $this.Schedule[$dayOfWeek.ToString()].Start,\\r\\n                    $this.Schedule[$dayOfWeek.ToString()].End,\\r\\n                    $costWindow.GetTotalCost(),\\r\\n                    $costWindow.GetTotalSubsidy()\\r\\n                )\\r\\n                # Add the workday to the array\\r\\n                $workdays += $workday\\r\\n            }\\r\\n\\r\\n            # Move to the next day\\r\\n            $currentDate = $currentDate.AddDays(1)\\r\\n        }\\r\\n\\r\\n        Write-Debug $workdays.Count\\r\\n\\r\\n        $yearlyCosts = $workdays |\\r\\n            Group-Object { (Get-Date $_.Date).ToString('yyyy-MM') } |\\r\\n            ForEach-Object {\\r\\n                [MonthlyCost]::new(\\r\\n                    $_.Name,\\r\\n                    $_.Count,\\r\\n                    ($_.Group | Measure-Object -Property TotalCost -Sum).Sum,\\r\\n                    ($_.Group | Measure-Object -Property TotalSubsidy -Sum).Sum\\r\\n                )\\r\\n            }\\r\\n        return $yearlyCosts\\r\\n    }\\r\\n\\r\\n    static [Contract] LoadFromFile([string]$filePath) {\\r\\n        if (-Not (Test-Path -Path $filePath)) {\\r\\n            throw \\\"File not found: $filePath\\\"\\r\\n        }\\r\\n        $json = Get-Content -Path $filePath -Raw\\r\\n        $data = $json | ConvertFrom-Json -AsHashtable\\r\\n        $scheduleData = $data.Schedule\\r\\n        [Contract]$retval = [Contract]::new($data.FirstName, $data.LastName, $data.Year,$data.MorningCostPerHour, $data.MorningGovSubsidyPerHour, $data.AfternoonCostPerHour, $data.AfternoonGovSubsidyPerHour, $scheduleData)\\r\\n        return $retval\\r\\n    }\\r\\n}\",\r\n      {\r\n        \"extension\": \"ps1\",\r\n        \"type\": \"code\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/classes/contractps1\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_classes_holidayps1\",\r\n      \"class HoliDay {\\r\\n    [datetime]$Date\\r\\n    [string]$Name\\r\\n\\r\\n    HoliDay([datetime]$Date, [string]$Name) {\\r\\n        $this.Date = $Date\\r\\n        $this.Name = $Name\\r\\n    }\\r\\n}\\r\\n\\r\\n# [HoliDay] $holiday = [HoliDay]::new((Get-Date -Year 2021 -Month 1 -Day 1), \\\"New Year's Day\\\")\\r\\n# Write-Output \\\"$($holiday.Date) - $($holiday.Name)\\\"\",\r\n      {\r\n        \"extension\": \"ps1\",\r\n        \"type\": \"code\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/classes/holidayps1\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_config_contractjson\",\r\n      \"{\\r\\n  \\\"FirstName\\\": \\\"Daniel\\\",\\r\\n  \\\"LastName\\\": \\\"Testuser\\\",\\r\\n  \\\"Year\\\": \\\"2025\\\",\\r\\n  \\\"MorningCostPerHour\\\": 6.0,\\r\\n  \\\"MorningGovSubsidyPerHour\\\": 4.5,\\r\\n  \\\"AfternoonCostPerHour\\\": 5.0,\\r\\n  \\\"AfternoonGovSubsidyPerHour\\\": 0.0,\\r\\n  \\\"Schedule\\\": {\\r\\n    \\\"Monday\\\": {\\r\\n      \\\"Start\\\": \\\"08:00 AM\\\",\\r\\n      \\\"End\\\": \\\"03:00 PM\\\"\\r\\n    },\\r\\n    \\\"Tuesday\\\": {\\r\\n      \\\"Start\\\": \\\"08:00 AM\\\",\\r\\n      \\\"End\\\": \\\"03:00 PM\\\"\\r\\n    },\\r\\n    \\\"Wednesday\\\": {\\r\\n      \\\"Start\\\": \\\"08:00 AM\\\",\\r\\n      \\\"End\\\": \\\"03:00 PM\\\"\\r\\n    },\\r\\n    \\\"Thursday\\\": {\\r\\n      \\\"Start\\\": \\\"08:00 AM\\\",\\r\\n      \\\"End\\\": \\\"03:00 PM\\\"\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\r\n      {\r\n        \"extension\": \"json\",\r\n        \"type\": \"config\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/config/contractjson\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_data_contractResultjson\",\r\n      \"[\\r\\n  {\\r\\n    \\\"Month\\\": \\\"2025-01\\\",\\r\\n    \\\"Days\\\": 16,\\r\\n    \\\"TotalCost\\\": 280.0,\\r\\n    \\\"TotalSubsidy\\\": 360.0\\r\\n  },\\r\\n  {\\r\\n    \\\"Month\\\": \\\"2025-02\\\",\\r\\n    \\\"Days\\\": 16,\\r\\n    \\\"TotalCost\\\": 280.0,\\r\\n    \\\"TotalSubsidy\\\": 360.0\\r\\n  },\\r\\n  {\\r\\n    \\\"Month\\\": \\\"2025-03\\\",\\r\\n    \\\"Days\\\": 17,\\r\\n    \\\"TotalCost\\\": 297.5,\\r\\n    \\\"TotalSubsidy\\\": 382.5\\r\\n  },\\r\\n  {\\r\\n    \\\"Month\\\": \\\"2025-04\\\",\\r\\n    \\\"Days\\\": 17,\\r\\n    \\\"TotalCost\\\": 297.5,\\r\\n    \\\"TotalSubsidy\\\": 382.5\\r\\n  },\\r\\n  {\\r\\n    \\\"Month\\\": \\\"2025-05\\\",\\r\\n    \\\"Days\\\": 15,\\r\\n    \\\"TotalCost\\\": 262.5,\\r\\n    \\\"TotalSubsidy\\\": 337.5\\r\\n  },\\r\\n  {\\r\\n    \\\"Month\\\": \\\"2025-06\\\",\\r\\n    \\\"Days\\\": 15,\\r\\n    \\\"TotalCost\\\": 262.5,\\r\\n    \\\"TotalSubsidy\\\": 337.5\\r\\n  },\\r\\n  {\\r\\n    \\\"Month\\\": \\\"2025-07\\\",\\r\\n    \\\"Days\\\": 19,\\r\\n    \\\"TotalCost\\\": 332.5,\\r\\n    \\\"TotalSubsidy\\\": 427.5\\r\\n  },\\r\\n  {\\r\\n    \\\"Month\\\": \\\"2025-08\\\",\\r\\n    \\\"Days\\\": 16,\\r\\n    \\\"TotalCost\\\": 280.0,\\r\\n    \\\"TotalSubsidy\\\": 360.0\\r\\n  },\\r\\n  {\\r\\n    \\\"Month\\\": \\\"2025-09\\\",\\r\\n    \\\"Days\\\": 18,\\r\\n    \\\"TotalCost\\\": 315.0,\\r\\n    \\\"TotalSubsidy\\\": 405.0\\r\\n  },\\r\\n  {\\r\\n    \\\"Month\\\": \\\"2025-10\\\",\\r\\n    \\\"Days\\\": 18,\\r\\n    \\\"TotalCost\\\": 315.0,\\r\\n    \\\"TotalSubsidy\\\": 405.0\\r\\n  },\\r\\n  {\\r\\n    \\\"Month\\\": \\\"2025-11\\\",\\r\\n    \\\"Days\\\": 16,\\r\\n    \\\"TotalCost\\\": 280.0,\\r\\n    \\\"TotalSubsidy\\\": 360.0\\r\\n  },\\r\\n  {\\r\\n    \\\"Month\\\": \\\"2025-12\\\",\\r\\n    \\\"Days\\\": 17,\\r\\n    \\\"TotalCost\\\": 297.5,\\r\\n    \\\"TotalSubsidy\\\": 382.5\\r\\n  }\\r\\n]\\r\\n\",\r\n      {\r\n        \"extension\": \"json\",\r\n        \"type\": \"config\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/data/contractResultjson\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_functions_bankholidaysps1\",\r\n      \". \\\"$PSScriptRoot\\\\..\\\\classes\\\\holiday.ps1\\\"\\r\\n\\r\\nfunction Get-RestDateFormat {\\r\\n    return \\\"yyyy-MM-dd\\\"\\r\\n}\\r\\n\\r\\n# this function retrieves Austrian bank holidays from openholidaysapi.org\\r\\nfunction Get-AustrianBankHolidays {\\r\\n    # PSScriptAnalyzer rule suppression because it returns an array of objects\\r\\n    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseSingularNouns', 'Get-AustrianBankHolidays')]\\r\\n    param (\\r\\n        [Parameter(Mandatory=$true)]\\r\\n        [datetime]$StartDate,\\r\\n        [Parameter(Mandatory=$true)]\\r\\n        [datetime]$EndDate\\r\\n    )\\r\\n\\r\\n    $restDateFormat = Get-RestDateFormat\\r\\n    $startDateString = $StartDate.ToString($restDateFormat)\\r\\n    $endDateString = $EndDate.ToString($restDateFormat)\\r\\n\\r\\n    Write-Output \\\"Getting Austrian bank holidays from $startDateString to $endDateString from openholidaysapi.org\\\"\\r\\n    $url = \\\"https://openholidaysapi.org/PublicHolidays?countryIsoCode=AT&languageIsoCode=DE&validFrom=$startDateString&validTo=$endDateString\\\"\\r\\n    Write-Output $url\\r\\n    try {\\r\\n        $response = Invoke-RestMethod -Uri $url -Method Get\\r\\n    } catch {\\r\\n        Write-Error \\\"Failed to retrieve data from API: $_\\\"\\r\\n        return\\r\\n    }\\r\\n\\r\\n    $holidayArray = @()\\r\\n    $response | ForEach-Object {\\r\\n        $holidayObject =[HoliDay]::new([datetime]$_.startDate, [string]$_.name.text)\\r\\n        $holidayArray += $holidayObject\\r\\n    }\\r\\n    return $holidayArray\\r\\n}\\r\\n\\r\\n# Get-AustrianBankHolidays -StartDate (Get-Date -Year 2021 -Month 1 -Day 1) -EndDate (Get-Date -Year 2021 -Month 12 -Day 31)\\r\\n\",\r\n      {\r\n        \"extension\": \"ps1\",\r\n        \"type\": \"code\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/functions/bankholidaysps1\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_functions_Get-ApiTokenps1\",\r\n      \"# Ensure you have the PnP PowerShell module installed\\r\\nif (-not (Get-Module -ListAvailable -Name PnP.PowerShell)) {\\r\\n    Install-Module PnP.PowerShell -Scope CurrentUser -AllowPrerelease -SkipPublisherCheck\\r\\n}\\r\\n\\r\\nfunction Get-ApiToken {\\r\\n    if (-not $env:CHATAPI_TOKEN) {\\r\\n        $secretUrl = git remote get-url origin\\r\\n        $apiSecret = Get-PnPStoredCredential -Name $secretUrl\\r\\n        if (-not $apiSecret) {\\r\\n            throw \\\"API key is not set. runSetAPISecret.ps1 or set the CHATAPI_TOKEN environment variable.\\\"\\r\\n        }\\r\\n        # Convert the secure string to plain text it it is just a PAT so not too worried about it\\r\\n        return ConvertFrom-SecureString -SecureString $apiSecret.Password -AsPlainText\\r\\n    } else {\\r\\n        return $env:CHATAPI_TOKEN  # Ensure you have set this environment variable\\r\\n    }\\r\\n}\",\r\n      {\r\n        \"extension\": \"ps1\",\r\n        \"type\": \"code\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/functions/Get-ApiTokenps1\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_functions_Invoke-ChatCompletionps1\",\r\n      \"# This function sends a chat completion request to the OpenAI API.\\r\\n# It takes a prompt, API key, base URL, and model as parameters.\\r\\n    function Invoke-ChatCompletion {\\r\\n    param (\\r\\n        [string]$Prompt,\\r\\n        [string]$ApiKey,\\r\\n        [string]$BaseUrl,\\r\\n        [string]$Model = \\\"o3-mini\\\"\\r\\n    )\\r\\n\\r\\n    # No manual escaping is needed when using ConvertTo-Json,\\r\\n    # just trim the prompt to remove any leading or trailing whitespace.\\r\\n    $Prompt = ConvertTo-Json $Prompt.Trim()\\r\\n\\r\\n\\r\\n    # Define the request payload\\r\\n    $Body = @{\\r\\n        messages = @(\\r\\n            @{ role = \\\"system\\\"; content = \\\"\\\" },\\r\\n            @{ role = \\\"user\\\"; content = $Prompt }\\r\\n        )\\r\\n        model = $Model\\r\\n    } | ConvertTo-Json -Depth 10\\r\\n\\r\\n    # Define headers\\r\\n    $Headers = @{\\r\\n        \\\"Authorization\\\" = \\\"Bearer $ApiKey\\\"\\r\\n        \\\"Content-Type\\\" = \\\"application/json\\\"\\r\\n    }\\r\\n\\r\\n    # Make the API request\\r\\n    try {\\r\\n        $url = \\\"$BaseUrl/chat/completions\\\"\\r\\n        Write-Output \\\"Request URL: $url\\\"\\r\\n        $Response = Invoke-RestMethod -Uri $url  -Method Post -Headers $Headers -Body $Body\\r\\n\\r\\n        return $Response.choices[0].message.content\\r\\n    } catch {\\r\\n        Write-Error \\\"The sample encountered an error: $_\\\"\\r\\n        Write-Error \\\"with the following parameters:\\\"\\r\\n        Write-Error \\\"Prompt: $Prompt\\\"\\r\\n        Write-Error \\\"BaseUrl: $BaseUrl\\\"\\r\\n        throw\\r\\n    }\\r\\n}\",\r\n      {\r\n        \"extension\": \"ps1\",\r\n        \"type\": \"code\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/functions/Invoke-ChatCompletionps1\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_scripts_generateWorkdaysReportps1\",\r\n      \"# generateWorkdaysReport.ps1\\r\\n\\r\\n. ./Modules/workday.ps1\\r\\n\\r\\n$workdaysByMonth = Get-Content -Path \\\"data/workdaysByMonth.json\\\" | ConvertFrom-Json\\r\\n\\r\\n$output = \\\"| Month       | Workdays |\\\\n|-------------|----------|\\\\n\\\"\\r\\nforeach ($month in $workdaysByMonth) {\\r\\n    $output += \\\"| $($month.Month) | $($month.Count) |\\\\n\\\"\\r\\n}\\r\\n\\r\\n$output | Set-Content -Path \\\"output.md\\\"\",\r\n      {\r\n        \"extension\": \"ps1\",\r\n        \"type\": \"code\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/scripts/generateWorkdaysReportps1\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_scripts_Pathsps1\",\r\n      \"# Show-SortedPaths function\\r\\n# This script sorts the system PATH variable and displays it in color-coded format.\\r\\nfunction Show-SortedPath {\\r\\n    $paths = $env:Path -split ';'\\r\\n\\r\\n    $sortedPaths = $paths | Sort-Object\\r\\n\\r\\n    foreach ($path in $sortedPaths) {\\r\\n        switch -Regex ($path) {\\r\\n            '^C:\\\\\\\\Program Files' { Write-Host $path -ForegroundColor Blue; break }\\r\\n            '^C:\\\\\\\\Users' { Write-Host $path -ForegroundColor Yellow; break }\\r\\n            '^C:\\\\\\\\Windows' { Write-Host $path -ForegroundColor Green; break }\\r\\n            default { Write-Host $path -ForegroundColor White }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n# Set-Path function\\r\\n# This function sets a new path variable to the specified path.\\r\\nfunction Set-Path {\\r\\n    [CmdletBinding(SupportsShouldProcess)]\\r\\n    param (\\r\\n        [string]$newPath\\r\\n    )\\r\\n\\r\\n    # Set a new path variable to the specified path\\r\\n    if ($PSCmdlet.ShouldProcess(\\\"Adding $newPath to PATH\\\")) {\\r\\n        if ($env:Path -notmatch [regex]::Escape($newPath)) {\\r\\n            $env:Path += \\\";$newPath\\\"\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\r\n      {\r\n        \"extension\": \"ps1\",\r\n        \"type\": \"code\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/scripts/Pathsps1\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_scripts_pslintps1\",\r\n      \"\\r\\n# This script is used to lint PowerShell scripts using PSScriptAnalyzer.\\r\\n# It checks if PSScriptAnalyzer is installed, installs it if not, and then\\r\\n# runs the analysis on all PowerShell scripts in the current directory and\\r\\n\\r\\n# Check if PSScriptAnalyzer is installed, if not install it.\\r\\nif (-not (Get-Module -ListAvailable -Name PSScriptAnalyzer)) {\\r\\n    Set-PSRepository PSGallery -InstallationPolicy Trusted\\r\\n    Install-Module PSScriptAnalyzer -ErrorAction Stop\\r\\n}\\r\\n\\r\\n# Lint the PowerShell scripts.\\r\\nInvoke-ScriptAnalyzer -Path *.ps1 -Recurse -Outvariable issues\\r\\n\\r\\n$errors   = $issues.Where({$_.Severity -eq 'Error'})\\r\\n$warnings = $issues.Where({$_.Severity -eq 'Warning'})\\r\\nif ($errors) {\\r\\n    Write-Error \\\"There were $($errors.Count) errors and $($warnings.Count) warnings total.\\\"\\r\\n} else {\\r\\n    Write-Output \\\"There were $($errors.Count) errors and $($warnings.Count) warnings total.\\\"\\r\\n}\\r\\n\\r\\n# Convert the issues to a markdown table\\r\\n$markdownTable = @\\\"\\r\\n| Severity | Line | Message |\\r\\n|----------|------|---------|\\r\\n\\\"@\\r\\n\\r\\nforeach ($issue in $issues) {\\r\\n    $markdownTable += \\\"| $($issue.Severity) | $($issue.Line) | $($issue.Message) |`n\\\"\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n# Output the markdown table to the step summary\\r\\nWrite-Output $markdownTable\\r\\n\\r\\n# Fail the build if there are any errors in the script files\\r\\nif ($errors) {\\r\\n    Write-Error \\\"Errors found in script files.\\\"\\r\\n    exit 1\\r\\n} else {\\r\\n    Write-Output \\\"No errors found in script files.\\\"\\r\\n}\",\r\n      {\r\n        \"extension\": \"ps1\",\r\n        \"type\": \"code\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/scripts/pslintps1\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_tests_gitignore\",\r\n      \"/test_person.json\\r\\n\",\r\n      {\r\n        \"extension\": \"gitignore\",\r\n        \"type\": \"other\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/tests/gitignore\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_tests_bankholidaystestsps1\",\r\n      \"# Modules/bankholidays.Tests.ps1\\r\\n\\r\\nDescribe \\\"Get-RestDateFormat\\\" {\\r\\n    BeforeAll {\\r\\n         # Load the class definition\\r\\n        # strange handling is required so it works in both environments\\r\\n        # (VSCode and GitHub Actions)\\r\\n        $paths = @(\\r\\n            \\\"$PSScriptRoot/functions\\\\bankholidays.ps1\\\",\\r\\n            \\\"$PSScriptRoot/../functions\\\\bankholidays.ps1\\\"\\r\\n        )\\r\\n\\r\\n        $foundPath = $paths | Where-Object { Test-Path $_ } | Select-Object -First 1\\r\\n\\r\\n        if ($foundPath) {\\r\\n            . $foundPath\\r\\n        }\\r\\n        else {\\r\\n            throw \\\"File not found: $($paths -join ', ')\\\"\\r\\n        }\\r\\n    }\\r\\n    It \\\"should return the correct date format\\\" {\\r\\n        $result = Get-RestDateFormat\\r\\n        $result | Should -Be \\\"yyyy-MM-dd\\\"\\r\\n    }\\r\\n}\\r\\n\\r\\nDescribe \\\"Get-AustrianBankHolidays\\\" {\\r\\n    BeforeAll {\\r\\n        . \\\"$PSScriptRoot\\\\..\\\\functions\\\\bankholidays.ps1\\\"\\r\\n    }\\r\\n    Context \\\"When called with valid dates\\\" {\\r\\n        It \\\"Should return an array of holiday objects\\\" {\\r\\n            $result = Get-AustrianBankHolidays -StartDate \\\"2023-01-01\\\" -EndDate \\\"2023-12-31\\\"\\r\\n            $result.Count | Should -Be 15\\r\\n        }\\r\\n    }\\r\\n\\r\\n    Context \\\"When API call fails\\\" {\\r\\n        It \\\"Should write an error message and return nothing\\\" {\\r\\n            { Get-AustrianBankHolidays -StartDate \\\"XXX\\\" -EndDate \\\"2023-12-31\\\" } | Should -Throw\\r\\n        }\\r\\n    }\\r\\n}\",\r\n      {\r\n        \"extension\": \"ps1\",\r\n        \"type\": \"code\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/tests/bankholidaystestsps1\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_tests_contractTestsps1\",\r\n      \"# classes/contract.Tests.ps1\\r\\n\\r\\nDescribe 'Contract Class' {\\r\\n    BeforeAll {\\r\\n        # Load the class definition\\r\\n        # strange handling is required so it works in both environments\\r\\n        # (VSCode and GitHub Actions)\\r\\n        $paths = @(\\r\\n            \\\"$PSScriptRoot/classes/contract.ps1\\\",\\r\\n            \\\"$PSScriptRoot/../classes/contract.ps1\\\"\\r\\n        )\\r\\n\\r\\n        $foundPath = $paths | Where-Object { Test-Path $_ } | Select-Object -First 1\\r\\n\\r\\n        if ($foundPath) {\\r\\n            . $foundPath\\r\\n        }\\r\\n        else {\\r\\n            throw \\\"File not found: $($paths -join ', ')\\\"\\r\\n        }\\r\\n    }\\r\\n\\r\\n    Context 'Constructor' {\\r\\n        It 'should create an instance of Contract with correct properties' {\\r\\n            $schedule = @{\\r\\n                Monday = @{ Start = \\\"08:00 AM\\\"; End = \\\"04:00 PM\\\" }\\r\\n                Tuesday = @{ Start = \\\"08:00 AM\\\"; End = \\\"04:00 PM\\\" }\\r\\n            }\\r\\n            $contract = [Contract]::new(\\\"John\\\", \\\"Doe\\\", \\\"2023\\\", 20.0, 5.0, 25.0, 10.0, $schedule)\\r\\n            $contract | Should -Not -BeNull\\r\\n            $contract.FirstName | Should -Be \\\"John\\\"\\r\\n            $contract.LastName | Should -Be \\\"Doe\\\"\\r\\n            $contract.Year | Should -Be \\\"2023\\\"\\r\\n            $contract.MorningCostPerHour | Should -Be 20.0\\r\\n            $contract.MorningGovSubsidyPerHour | Should -Be 5.0\\r\\n            $contract.AfternoonCostPerHour | Should -Be 25.0\\r\\n            $contract.AfternoonGovSubsidyPerHour | Should -Be 10.0\\r\\n            $contract.Schedule | Should -Be $schedule\\r\\n        }\\r\\n    }\\r\\n\\r\\n    Context 'Calculate Method' {\\r\\n        It 'should calculate monthly costs correctly' {\\r\\n            $schedule = @{\\r\\n                Monday = @{ Start = \\\"08:00 AM\\\"; End = \\\"04:00 PM\\\" }\\r\\n                Tuesday = @{ Start = \\\"08:00 AM\\\"; End = \\\"04:00 PM\\\" }\\r\\n            }\\r\\n            $contract = [Contract]::new(\\\"John\\\", \\\"Doe\\\", \\\"2023\\\", 20.0, 5.0, 25.0, 10.0, $schedule)\\r\\n            $monthlyCosts = $contract.Calculate()\\r\\n            $monthlyCosts | Should -Not -BeNull\\r\\n            $monthlyCosts.Count | Should -BeGreaterThan 0\\r\\n        }\\r\\n    }\\r\\n\\r\\n    Context 'LoadFromFile Method' {\\r\\n        It 'should load contract from file correctly' {\\r\\n\\r\\n            # attention case sensitive on linux runner\\r\\n            $paths = @(\\r\\n                \\\"$PSScriptRoot/config/contract.json\\\",\\r\\n                \\\"$PSScriptRoot/../config/contract.json\\\",\\r\\n                \\\"$PSScriptRoot/config/Contract.json\\\",\\r\\n                \\\"$PSScriptRoot/../config/Contract.json\\\"\\r\\n            )\\r\\n\\r\\n            $foundPath = $paths | Where-Object { Test-Path $_ } | Select-Object -First 1\\r\\n\\r\\n            if ($foundPath) {\\r\\n                $filePath = $foundPath\\r\\n                Write-Output \\\"File found: $filePath\\\"\\r\\n            }\\r\\n            else {\\r\\n                throw \\\"File not found: $($paths -join ', ')\\\"\\r\\n            }\\r\\n\\r\\n            # $filePath = \\\"$PSScriptRoot/config/contract.json\\\"\\r\\n            $contract = [Contract]::LoadFromFile($filePath)\\r\\n            $contract | Should -Not -BeNull\\r\\n            $contract.FirstName | Should -Be \\\"Daniel\\\"\\r\\n            $contract.LastName | Should -Be \\\"Testuser\\\"\\r\\n            $contract.Year | Should -Be \\\"2025\\\"\\r\\n        }\\r\\n    }\\r\\n}\",\r\n      {\r\n        \"extension\": \"ps1\",\r\n        \"type\": \"code\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/tests/contractTestsps1\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  },\r\n  {\r\n    \"id\": [\r\n      \"file_C:_repos_danielsiegl_powershellplayground_tests_holidayTestsps1\",\r\n      \"# classes/holiday.Tests.ps1\\r\\n\\r\\nDescribe 'HoliDay Class' {\\r\\n    BeforeAll {\\r\\n        # Load the class definition\\r\\n        # strange handling is required so it works in both environments\\r\\n        # (VSCode and GitHub Actions)\\r\\n        $paths = @(\\r\\n            \\\"$PSScriptRoot/classes/holiday.ps1\\\",\\r\\n            \\\"$PSScriptRoot/../classes/holiday.ps1\\\"\\r\\n        )\\r\\n\\r\\n        $foundPath = $paths | Where-Object { Test-Path $_ } | Select-Object -First 1\\r\\n\\r\\n        if ($foundPath) {\\r\\n            . $foundPath\\r\\n        }\\r\\n        else {\\r\\n            throw \\\"File not found: $($paths -join ', ')\\\"\\r\\n        }\\r\\n    }\\r\\n    Context 'Constructor' {\\r\\n        It 'should create an instance of HoliDay with correct properties' {\\r\\n            $date = Get-Date -Year 2021 -Month 1 -Day 1\\r\\n            $name = \\\"New Year's Day\\\"\\r\\n            $holiday = [HoliDay]::new($date, $name)\\r\\n            $holiday | Should -Not -BeNull\\r\\n            $holiday.Date | Should -Be $date\\r\\n            $holiday.Name | Should -Be $name\\r\\n        }\\r\\n    }\\r\\n\\r\\n    Context 'Properties' {\\r\\n        It 'should allow getting and setting Date property' {\\r\\n            $holiday = [HoliDay]::new((Get-Date), \\\"Test Holiday\\\")\\r\\n            $newDate = Get-Date -Year 2022 -Month 12 -Day 25\\r\\n            $holiday.Date = $newDate\\r\\n\\r\\n            $holiday.Date | Should -Be $newDate\\r\\n        }\\r\\n\\r\\n        It 'should allow getting and setting Name property' {\\r\\n            $holiday = [HoliDay]::new((Get-Date), \\\"Test Holiday\\\")\\r\\n            $newName = \\\"Christmas\\\"\\r\\n            $holiday.Name = $newName\\r\\n\\r\\n            $holiday.Name | Should -Be $newName\\r\\n        }\\r\\n    }\\r\\n}\",\r\n      {\r\n        \"extension\": \"ps1\",\r\n        \"type\": \"code\",\r\n        \"path\": \"C:/repos/danielsiegl/powershellplayground/tests/holidayTestsps1\"\r\n      }\r\n    ],\r\n    \"text\": null,\r\n    \"metadata\": null\r\n  }\r\n]\r\n",
    "metadata": {
      "extension": "json",
      "type": "config",
      "path": "C:/repos/danielsiegl/powershellplayground/git_repo_docsjson"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_READMEmd",
    "text": "# PowerShell Playground\r\n\r\nWelcome to the PowerShell Playground repository! This is a personal space dedicated to experimenting with PowerShell scripts, modules, and various automation tasks. Whether you're a seasoned PowerShell user or just starting out, this repository offers a variety of resources to explore and enhance your scripting skills.\r\n\r\n## Table of Contents\r\n\r\n- [Introduction](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#introduction)\r\n- [Repository Structure](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#repository-structure)\r\n- [Getting Started](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#getting-started)\r\n- [Scripts Overview](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#scripts-overview)\r\n- [Modules](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#modules)\r\n- [Contributing](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#contributing)\r\n- [License](https://chatgpt.com/c/67cefe0b-494c-8002-8a89-3ad66015c66f#license)\r\n\r\n## Introduction\r\n\r\nPowerShell is a powerful scripting language and command-line shell designed especially for system administration. This repository serves as a sandbox to test, learn, and develop PowerShell scripts and modules. Feel free to explore the content, suggest improvements, or contribute your own scripts.\r\n\r\n## Repository Structure\r\n\r\nThe repository is organized into the following directories:\r\n\r\n- **classes/**: Contains PowerShell class definitions used across various scripts.\r\n- **config/**: Configuration files that support the scripts and modules.\r\n- **data/**: Sample data files utilized by the scripts for processing and testing.\r\n- **functions/**: Reusable PowerShell functions that can be imported and used in different scripts.\r\n- **scripts/**: Standalone PowerShell scripts demonstrating specific tasks or solutions.\r\n- **tests/**: Test scripts to validate the functionality of modules and functions.\r\n- **.github/workflows/**: GitHub Actions workflows for CI/CD pipelines.\r\n\r\n## Getting Started\r\n\r\nTo get started with the PowerShell Playground:\r\n\r\n1. **Clone the Repository**:\r\n    \r\n    ```bash\r\n    git clone https://github.com/danielsiegl/powershellplayground.git\r\n    cd powershellplayground\r\n    ```\r\n    \r\n2. **Explore the Directories**: Navigate through the directories to understand the structure and content.\r\n    \r\n3. **Run Sample Scripts**: Inside the `scripts/` directory, you'll find various PowerShell scripts. Open and run them using PowerShell to see them in action.\r\n    \r\n4. **Utilize Functions**: The `functions/` directory contains reusable functions. You can import these into your own scripts as needed.\r\n    \r\n\r\n## Scripts Overview\r\n\r\nHere are some notable scripts included in this repository:\r\n\r\n- **calculateContract.ps1**: A script to calculate contract details based on provided data. This script demonstrates data processing and output formatting in PowerShell.\r\n\r\n## Modules\r\n\r\nThe repository includes custom modules located in the `functions/` directory. These modules encapsulate specific functionalities and can be imported into your PowerShell session or scripts:\r\n\r\n```powershell\r\nImport-Module -Name .\\functions\\YourModuleName.psm1\r\n```\r\n\r\nReplace `YourModuleName.psm1` with the actual module name you wish to import.\r\n\r\n## Contributing\r\n\r\nContributions are welcome! If you have scripts, functions, or modules that you believe would benefit others, feel free to fork the repository and submit a pull request. Please ensure that your contributions adhere to the following guidelines:\r\n\r\n- Follow the existing directory structure.\r\n- Include comments and documentation within your scripts.\r\n- Test your scripts for functionality and reliability.\r\n\r\n## License\r\n\r\nThis project is licensed under the MIT License. For more details, refer to the `LICENSE` file in the repository.\r\n\r\n---\r\n\r\nThank you for visiting the PowerShell Playground. Happy scripting!\r\n\r\n\r\n",
    "metadata": {
      "extension": "md",
      "type": "doc",
      "path": "C:/repos/danielsiegl/powershellplayground/READMEmd"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_runOpenAIModelsps1",
    "text": "# check for pwsh\r\nif ($PSVersionTable.PSEdition -ne \"Core\") {\r\n    throw  \"This script is intended to be run in PowerShell Core (pwsh).\"\r\n}\r\n\r\n# Install the required module if not installed\r\n# Install-Module -Name Microsoft.PowerShell.Utility -Force\r\n. .\\functions\\Get-ApiToken.ps1\r\n. .\\functions\\Invoke-ChatCompletion.ps1\r\n\r\n$baseUrl = \"https://api.openai.com/v1\"  #\"https://models.inference.ai.azure.com\"\r\n$apiKey = Get-ApiToken  # Ensure you have set this environment variable\r\n$model = \"o3-mini\" #\"4o-mini\" #\"gpt-4o\"  # Specify the model you want to use\r\n\r\n$prompt = \"What is the capital of France?\"\r\n\r\n# Example usage\r\nWrite-Output \"Prompt: $prompt\"\r\n$ResponseMessage = Invoke-ChatCompletion -Prompt $prompt -ApiKey $apiKey -BaseUrl $baseUrl -Model $model\r\nWrite-Output \"$($ResponseMessage[0])\"\r\nWrite-Output \"Response: $($ResponseMessage[1])\"\r\n",
    "metadata": {
      "extension": "ps1",
      "type": "code",
      "path": "C:/repos/danielsiegl/powershellplayground/runOpenAIModelsps1"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_runSetAPISecretps1",
    "text": "# This script sets the API secret for the GitHub repository using PnP PowerShell.\r\n\r\n# Ensure you have the PnP PowerShell module installed\r\nif (-not (Get-Module -ListAvailable -Name PnP.PowerShell)) {\r\n    Install-Module PnP.PowerShell -Scope CurrentUser -AllowPrerelease -SkipPublisherCheck\r\n}\r\n\r\n# Ask the User for the API secret\r\nWrite-Output \"Please enter your GitHub API secret: <ctrl+shift+v> to paste\"\r\n$secretUrl = git remote get-url origin\r\nwrite-output \"Setting API secret for $secretUrl\"\r\nAdd-PnPStoredCredential -Name $secretUrl  -Username API_TOKEN -Password (Read-Host -Prompt \"Enter your GitHub API secret\" -AsSecureString)",
    "metadata": {
      "extension": "ps1",
      "type": "code",
      "path": "C:/repos/danielsiegl/powershellplayground/runSetAPISecretps1"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_github_workflows_Validateyml",
    "text": "name: Validate\r\non: push\r\n\r\npermissions:\r\n  checks: write\r\n  pull-requests: write\r\n\r\njobs:\r\n  powershell-linter:\r\n    name: Run Linter\r\n    runs-on: ubuntu-latest\r\n    defaults:\r\n      run:\r\n        shell: pwsh\r\n    steps:\r\n      - uses: actions/checkout@v4\r\n      - name: Install PSScriptAnalyzer module\r\n        run: |\r\n          Set-PSRepository PSGallery -InstallationPolicy Trusted\r\n          Install-Module PSScriptAnalyzer -ErrorAction Stop\r\n          \r\n      - name: Lint with PSScriptAnalyzer\r\n        run: |\r\n          Invoke-ScriptAnalyzer -Path **\\*.ps1 -Recurse -Outvariable issues\r\n          $errors   = $issues.Where({$_.Severity -eq 'Error'})\r\n          $warnings = $issues.Where({$_.Severity -eq 'Warning'})\r\n          if ($errors) {\r\n              Write-Error \"There were $($errors.Count) errors and $($warnings.Count) warnings total.\"\r\n          } else {\r\n              Write-Output \"There were $($errors.Count) errors and $($warnings.Count) warnings total.\"\r\n          }\r\n\r\n            if ($issues) {\r\n              # Format issues into a markdown table\r\n              $markdownTable = \"\"\r\n              $markdownTable += \"| Severity | RuleName | ScriptName | Line | Message |`n\"\r\n              $markdownTable += \"|----------|----------|------------|------|---------|`n\"\r\n\r\n              foreach ($issue in $issues) {\r\n                $markdownTable += \"| $($issue.Severity) |$($issue.RuleName) | $($issue.ScriptName) |$($issue.Line) | $($issue.Message) |`n\"\r\n              }\r\n\r\n              # Output the markdown table to the step summary\r\n              $markdownTable | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append\r\n            }\r\n\r\n          # Fail the build if there are any errors in the script files\r\n          if ($errors) {\r\n              Write-Error \"Errors found in script files.\"\r\n              exit 1\r\n          } else {\r\n              Write-Output \"No errors found in script files.\"\r\n          }\r\n\r\n  pester-unit-tests:\r\n    name: Run Pester\r\n    runs-on: ubuntu-latest\r\n    defaults:\r\n      run:\r\n        shell: pwsh\r\n    steps:\r\n      - name: Check out repository code\r\n        uses: actions/checkout@v4\r\n      \r\n      - name: Perform a Pester Tests\r\n        if: always()\r\n        run: |\r\n          Invoke-Pester ./tests/*.ps1 -Passthru -OutputFile \"./test-results/TestResults.xml\" -OutputFormat NUnitXml\r\n          # don't fail on failed tests\r\n          exit 0\r\n\r\n      - name: Publish Results\r\n        uses: EnricoMi/publish-unit-test-result-action@v2\r\n        if: always()\r\n        with:\r\n          files: |\r\n            test-results/**/*.xml",
    "metadata": {
      "extension": "yml",
      "type": "other",
      "path": "C:/repos/danielsiegl/powershellplayground/github/workflows/Validateyml"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_obsidian_gitignore",
    "text": "/appearance.json\r\n/core-plugins.json\r\n/workspace.json\r\n",
    "metadata": {
      "extension": "gitignore",
      "type": "other",
      "path": "C:/repos/danielsiegl/powershellplayground/obsidian/gitignore"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_obsidian_appjson",
    "text": "{\r\n  \"useMarkdownLinks\": true\r\n}",
    "metadata": {
      "extension": "json",
      "type": "config",
      "path": "C:/repos/danielsiegl/powershellplayground/obsidian/appjson"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_classes_contractps1",
    "text": "# Load the bank holidays function\r\n. \"$PSScriptRoot/../functions\\bankholidays.ps1\"\r\n\r\n# Define the Workday class\r\n# This class represents a workday with properties for date, day of the week, start time, and end time.\r\nclass Workday {\r\n    [string]$Date\r\n    [string]$DayOfWeek\r\n    [string]$StartTime\r\n    [string]$EndTime\r\n    [double]$TotalCost\r\n    [double]$TotalSubsidy\r\n\r\n    Workday([string]$date, [string]$dayOfWeek, [string]$startTime, [string]$endTime, [double]$totalCost, [double]$totalSubsidy) {\r\n        $this.Date = $date\r\n        $this.DayOfWeek = $dayOfWeek\r\n        $this.StartTime = $startTime\r\n        $this.EndTime = $endTime\r\n        $this.TotalCost = $totalCost\r\n        $this.TotalSubsidy = $totalSubsidy\r\n    }\r\n}\r\n\r\n# Define the Contract class\r\n# This class represents a contract with properties for first name, last name, year, cost per hour, subsidy per hour, and schedule.\r\nclass MonthlyCost {\r\n    [string]$Month\r\n    [int] $Days\r\n    [double] $TotalCost\r\n    [double] $TotalSubsidy\r\n\r\n    MonthlyCost([string]$month, [int]$days, [double]$totalCost, [double]$totalSubsidy) {\r\n        $this.Month = $month\r\n        $this.Days = $days\r\n        $this.TotalCost = $totalCost\r\n        $this.TotalSubsidy = $totalSubsidy\r\n    }\r\n}\r\n\r\n# Define the DailyCost class\r\n# This class represents the cost calculation for a single day with properties for start time, end time, cost per hour, and government subsidy per hour.\r\nclass DailyCost {\r\n    [DateTime]$StartTime\r\n    [DateTime]$EndTime\r\n    [double]$MorningCostPerHour\r\n    [double]$AfternoonCostPerHour\r\n    [double]$MorningGovSubsidyPerHour\r\n    [double]$AfternoonGovSubsidyPerHour\r\n    [double]$TotalCost\r\n    [double]$TotalSubsidy\r\n    # Constructor to initialize the CostWindow object\r\n    DailyCost([DateTime]$start, [DateTime]$end, [double]$morningCost, [double]$afternoonCost, [double]$morningGovSubsidy, [double]$afternoonGovSubsidy) {\r\n        if ($end -le $start) {\r\n            throw \"End time must be after start time.\"\r\n        }\r\n        $this.StartTime = $start\r\n        $this.EndTime = $end\r\n        $this.MorningCostPerHour = $morningCost\r\n        $this.AfternoonCostPerHour = $afternoonCost\r\n        $this.MorningGovSubsidyPerHour = $morningGovSubsidy\r\n        $this.AfternoonGovSubsidyPerHour = $afternoonGovSubsidy\r\n        # Calculate costs upon initialization\r\n        $this.CalculateCosts()\r\n    }\r\n\r\n    hidden [void] CalculateCosts() {\r\n        $sumOfCost = 0\r\n        $sumOfSub = 0\r\n        $current = $this.StartTime\r\n        while ($current -lt $this.EndTime) {\r\n            $nextHour = $current.AddHours(1)\r\n            if ($current.Hour -ge 8 -and $current.Hour -lt 13) {\r\n                # Morning pricing with optional government subsidy\r\n                $cost = $this.MorningCostPerHour - $this.MorningGovSubsidyPerHour\r\n                $sumOfCost += [math]::Min(($this.EndTime - $current).TotalHours, 1) * [math]::Max($cost, 0)\r\n                $sumOfSub += [math]::Min(($this.EndTime - $current).TotalHours, 1) * $this.MorningGovSubsidyPerHour\r\n            } elseif ($current.Hour -ge 13 -and $current.Hour -lt 15) {\r\n                # Afternoon pricing with optional government subsidy\r\n                $cost = $this.AfternoonCostPerHour - $this.AfternoonGovSubsidyPerHour\r\n                $sumOfCost += [math]::Min(($this.EndTime - $current).TotalHours, 1) * [math]::Max($cost, 0)\r\n                $sumOfSub += [math]::Min(($this.EndTime - $current).TotalHours, 1) * $this.AfternoonGovSubsidyPerHour\r\n            }\r\n            $current = $nextHour\r\n        }\r\n        $this.TotalCost = [math]::Round($sumOfCost, 2)\r\n        $this.TotalSubsidy = [math]::Round($sumOfSub, 2)\r\n    }\r\n\r\n    [double] GetTotalCost() {\r\n        return [math]::Round($this.TotalCost, 2)\r\n    }\r\n\r\n    [double] GetTotalSubsidy() {\r\n        return [math]::Round($this.TotalSubsidy, 2)\r\n    }\r\n}\r\n\r\n# Define the Contract class\r\n# This class represents a contract with properties for first name, last name, year, cost per hour, subsidy per hour, and schedule.\r\n\r\nclass Contract {\r\n    [string]$FirstName\r\n    [string]$LastName\r\n    [string]$Year\r\n    [double]$MorningCostPerHour\r\n    [double]$MorningGovSubsidyPerHour\r\n    [double]$AfternoonCostPerHour\r\n    [double]$AfternoonGovSubsidyPerHour\r\n    [hashtable]$Schedule\r\n\r\n    Contract([string]$firstName, [string]$lastName, [string]$year, [double]$morningCostPerHour, [double]$morningGovSubsidyPerHour, [double]$afternoonCostPerHour, [double]$afternoonGovSubsidyPerHour, [hashtable]$schedule) {\r\n        $this.FirstName = $firstName\r\n        $this.LastName = $lastName\r\n        $this.Year = $year\r\n        $this.MorningCostPerHour = $morningCostPerHour\r\n        $this.MorningGovSubsidyPerHour = $morningGovSubsidyPerHour\r\n        $this.AfternoonCostPerHour = $afternoonCostPerHour\r\n        $this.AfternoonGovSubsidyPerHour = $afternoonGovSubsidyPerHour\r\n        $this.Schedule = $schedule\r\n    }\r\n\r\n    [System.Collections.Generic.List[MonthlyCost]] Calculate() {\r\n        # Function body goes here\r\n        # Define the start and end dates for the year\r\n        [datetime]$startDateContract = Get-Date -Year $this.Year -Month 1 -Day 1\r\n        [datetime]$endDateContract = Get-Date -Year $this.Year -Month 12 -Day 31\r\n        [double]$morningRate = $this.MorningCostPerHour\r\n        [double]$afternoonRate = $this.AfternoonCostPerHour\r\n        [double]$morningGovSubsidy = $this.MorningGovSubsidyPerHour\r\n        [double]$afternoonGovSubsidy = $this.AfternoonGovSubsidyPerHour\r\n\r\n        $holidayArray = Get-AustrianBankHolidays -StartDate $startDateContract -EndDate $endDateContract\r\n\r\n        # Initialize an array to hold workdays\r\n        #[Workday[]]$workdays = @()\r\n        [System.Collections.Generic.List[Workday]] $workdays = [System.Collections.Generic.List[Workday]]::new()\r\n\r\n        # Loop through each day in the year\r\n        $currentDate = $startDateContract\r\n        while ($currentDate -le $endDateContract) {\r\n            $holiday = $holidayArray | Where-Object { $_.Date.Date -eq $currentDate.Date }\r\n            if ($holiday) {\r\n                $isHoliday = $true\r\n            } else {\r\n                $isHoliday = $false\r\n            }\r\n\r\n            # Get the day of the week\r\n            $dayOfWeek = $currentDate.DayOfWeek\r\n\r\n            # Check if the day is in the schedule and is not a holiday\r\n            if ($this.Schedule.Contains(\"$dayOfWeek\") -and -not $isHoliday) {\r\n\r\n                # combine the schedule and person information to calculate the cost\r\n                $dailySchedule = $this.Schedule[$dayOfWeek.ToString()]\r\n                $start = [DateTime]::ParseExact(\"$($currentDate.ToString('yyyy-MM-dd')) $($dailySchedule.Start)\", 'yyyy-MM-dd hh:mm tt', $null)\r\n                $end = [DateTime]::ParseExact(\"$($currentDate.ToString('yyyy-MM-dd')) $($dailySchedule.End)\", 'yyyy-MM-dd hh:mm tt', $null)\r\n\r\n                # Create a CostWindow object to calculate the cost for each workday - bit of an overkill - but the best way to show the usage of the class\r\n                $costWindow = [DailyCost]::new($start, $end, $morningRate, $afternoonRate, $morningGovSubsidy, $afternoonGovSubsidy)\r\n                # Create a Workday object\r\n                $workday = [Workday]::new(\r\n                    $currentDate.ToString('yyyy-MM-dd'),\r\n                    $dayOfWeek.ToString(),\r\n                    $this.Schedule[$dayOfWeek.ToString()].Start,\r\n                    $this.Schedule[$dayOfWeek.ToString()].End,\r\n                    $costWindow.GetTotalCost(),\r\n                    $costWindow.GetTotalSubsidy()\r\n                )\r\n                # Add the workday to the array\r\n                $workdays += $workday\r\n            }\r\n\r\n            # Move to the next day\r\n            $currentDate = $currentDate.AddDays(1)\r\n        }\r\n\r\n        Write-Debug $workdays.Count\r\n\r\n        $yearlyCosts = $workdays |\r\n            Group-Object { (Get-Date $_.Date).ToString('yyyy-MM') } |\r\n            ForEach-Object {\r\n                [MonthlyCost]::new(\r\n                    $_.Name,\r\n                    $_.Count,\r\n                    ($_.Group | Measure-Object -Property TotalCost -Sum).Sum,\r\n                    ($_.Group | Measure-Object -Property TotalSubsidy -Sum).Sum\r\n                )\r\n            }\r\n        return $yearlyCosts\r\n    }\r\n\r\n    static [Contract] LoadFromFile([string]$filePath) {\r\n        if (-Not (Test-Path -Path $filePath)) {\r\n            throw \"File not found: $filePath\"\r\n        }\r\n        $json = Get-Content -Path $filePath -Raw\r\n        $data = $json | ConvertFrom-Json -AsHashtable\r\n        $scheduleData = $data.Schedule\r\n        [Contract]$retval = [Contract]::new($data.FirstName, $data.LastName, $data.Year,$data.MorningCostPerHour, $data.MorningGovSubsidyPerHour, $data.AfternoonCostPerHour, $data.AfternoonGovSubsidyPerHour, $scheduleData)\r\n        return $retval\r\n    }\r\n}",
    "metadata": {
      "extension": "ps1",
      "type": "code",
      "path": "C:/repos/danielsiegl/powershellplayground/classes/contractps1"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_classes_holidayps1",
    "text": "class HoliDay {\r\n    [datetime]$Date\r\n    [string]$Name\r\n\r\n    HoliDay([datetime]$Date, [string]$Name) {\r\n        $this.Date = $Date\r\n        $this.Name = $Name\r\n    }\r\n}\r\n\r\n# [HoliDay] $holiday = [HoliDay]::new((Get-Date -Year 2021 -Month 1 -Day 1), \"New Year's Day\")\r\n# Write-Output \"$($holiday.Date) - $($holiday.Name)\"",
    "metadata": {
      "extension": "ps1",
      "type": "code",
      "path": "C:/repos/danielsiegl/powershellplayground/classes/holidayps1"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_config_contractjson",
    "text": "{\r\n  \"FirstName\": \"Daniel\",\r\n  \"LastName\": \"Testuser\",\r\n  \"Year\": \"2025\",\r\n  \"MorningCostPerHour\": 6.0,\r\n  \"MorningGovSubsidyPerHour\": 4.5,\r\n  \"AfternoonCostPerHour\": 5.0,\r\n  \"AfternoonGovSubsidyPerHour\": 0.0,\r\n  \"Schedule\": {\r\n    \"Monday\": {\r\n      \"Start\": \"08:00 AM\",\r\n      \"End\": \"03:00 PM\"\r\n    },\r\n    \"Tuesday\": {\r\n      \"Start\": \"08:00 AM\",\r\n      \"End\": \"03:00 PM\"\r\n    },\r\n    \"Wednesday\": {\r\n      \"Start\": \"08:00 AM\",\r\n      \"End\": \"03:00 PM\"\r\n    },\r\n    \"Thursday\": {\r\n      \"Start\": \"08:00 AM\",\r\n      \"End\": \"03:00 PM\"\r\n    }\r\n  }\r\n}\r\n",
    "metadata": {
      "extension": "json",
      "type": "config",
      "path": "C:/repos/danielsiegl/powershellplayground/config/contractjson"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_data_contractResultjson",
    "text": "[\r\n  {\r\n    \"Month\": \"2025-01\",\r\n    \"Days\": 16,\r\n    \"TotalCost\": 280.0,\r\n    \"TotalSubsidy\": 360.0\r\n  },\r\n  {\r\n    \"Month\": \"2025-02\",\r\n    \"Days\": 16,\r\n    \"TotalCost\": 280.0,\r\n    \"TotalSubsidy\": 360.0\r\n  },\r\n  {\r\n    \"Month\": \"2025-03\",\r\n    \"Days\": 17,\r\n    \"TotalCost\": 297.5,\r\n    \"TotalSubsidy\": 382.5\r\n  },\r\n  {\r\n    \"Month\": \"2025-04\",\r\n    \"Days\": 17,\r\n    \"TotalCost\": 297.5,\r\n    \"TotalSubsidy\": 382.5\r\n  },\r\n  {\r\n    \"Month\": \"2025-05\",\r\n    \"Days\": 15,\r\n    \"TotalCost\": 262.5,\r\n    \"TotalSubsidy\": 337.5\r\n  },\r\n  {\r\n    \"Month\": \"2025-06\",\r\n    \"Days\": 15,\r\n    \"TotalCost\": 262.5,\r\n    \"TotalSubsidy\": 337.5\r\n  },\r\n  {\r\n    \"Month\": \"2025-07\",\r\n    \"Days\": 19,\r\n    \"TotalCost\": 332.5,\r\n    \"TotalSubsidy\": 427.5\r\n  },\r\n  {\r\n    \"Month\": \"2025-08\",\r\n    \"Days\": 16,\r\n    \"TotalCost\": 280.0,\r\n    \"TotalSubsidy\": 360.0\r\n  },\r\n  {\r\n    \"Month\": \"2025-09\",\r\n    \"Days\": 18,\r\n    \"TotalCost\": 315.0,\r\n    \"TotalSubsidy\": 405.0\r\n  },\r\n  {\r\n    \"Month\": \"2025-10\",\r\n    \"Days\": 18,\r\n    \"TotalCost\": 315.0,\r\n    \"TotalSubsidy\": 405.0\r\n  },\r\n  {\r\n    \"Month\": \"2025-11\",\r\n    \"Days\": 16,\r\n    \"TotalCost\": 280.0,\r\n    \"TotalSubsidy\": 360.0\r\n  },\r\n  {\r\n    \"Month\": \"2025-12\",\r\n    \"Days\": 17,\r\n    \"TotalCost\": 297.5,\r\n    \"TotalSubsidy\": 382.5\r\n  }\r\n]\r\n",
    "metadata": {
      "extension": "json",
      "type": "config",
      "path": "C:/repos/danielsiegl/powershellplayground/data/contractResultjson"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_functions_bankholidaysps1",
    "text": ". \"$PSScriptRoot\\..\\classes\\holiday.ps1\"\r\n\r\nfunction Get-RestDateFormat {\r\n    return \"yyyy-MM-dd\"\r\n}\r\n\r\n# this function retrieves Austrian bank holidays from openholidaysapi.org\r\nfunction Get-AustrianBankHolidays {\r\n    # PSScriptAnalyzer rule suppression because it returns an array of objects\r\n    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseSingularNouns', 'Get-AustrianBankHolidays')]\r\n    param (\r\n        [Parameter(Mandatory=$true)]\r\n        [datetime]$StartDate,\r\n        [Parameter(Mandatory=$true)]\r\n        [datetime]$EndDate\r\n    )\r\n\r\n    $restDateFormat = Get-RestDateFormat\r\n    $startDateString = $StartDate.ToString($restDateFormat)\r\n    $endDateString = $EndDate.ToString($restDateFormat)\r\n\r\n    Write-Output \"Getting Austrian bank holidays from $startDateString to $endDateString from openholidaysapi.org\"\r\n    $url = \"https://openholidaysapi.org/PublicHolidays?countryIsoCode=AT&languageIsoCode=DE&validFrom=$startDateString&validTo=$endDateString\"\r\n    Write-Output $url\r\n    try {\r\n        $response = Invoke-RestMethod -Uri $url -Method Get\r\n    } catch {\r\n        Write-Error \"Failed to retrieve data from API: $_\"\r\n        return\r\n    }\r\n\r\n    $holidayArray = @()\r\n    $response | ForEach-Object {\r\n        $holidayObject =[HoliDay]::new([datetime]$_.startDate, [string]$_.name.text)\r\n        $holidayArray += $holidayObject\r\n    }\r\n    return $holidayArray\r\n}\r\n\r\n# Get-AustrianBankHolidays -StartDate (Get-Date -Year 2021 -Month 1 -Day 1) -EndDate (Get-Date -Year 2021 -Month 12 -Day 31)\r\n",
    "metadata": {
      "extension": "ps1",
      "type": "code",
      "path": "C:/repos/danielsiegl/powershellplayground/functions/bankholidaysps1"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_functions_Get-ApiTokenps1",
    "text": "# Ensure you have the PnP PowerShell module installed\r\nif (-not (Get-Module -ListAvailable -Name PnP.PowerShell)) {\r\n    Install-Module PnP.PowerShell -Scope CurrentUser -AllowPrerelease -SkipPublisherCheck\r\n}\r\n\r\nfunction Get-ApiToken {\r\n    if (-not $env:CHATAPI_TOKEN) {\r\n        $secretUrl = git remote get-url origin\r\n        $apiSecret = Get-PnPStoredCredential -Name $secretUrl\r\n        if (-not $apiSecret) {\r\n            throw \"API key is not set. runSetAPISecret.ps1 or set the CHATAPI_TOKEN environment variable.\"\r\n        }\r\n        # Convert the secure string to plain text it it is just a PAT so not too worried about it\r\n        return ConvertFrom-SecureString -SecureString $apiSecret.Password -AsPlainText\r\n    } else {\r\n        return $env:CHATAPI_TOKEN  # Ensure you have set this environment variable\r\n    }\r\n}",
    "metadata": {
      "extension": "ps1",
      "type": "code",
      "path": "C:/repos/danielsiegl/powershellplayground/functions/Get-ApiTokenps1"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_functions_Invoke-ChatCompletionps1",
    "text": "# This function sends a chat completion request to the OpenAI API.\r\n# It takes a prompt, API key, base URL, and model as parameters.\r\n    function Invoke-ChatCompletion {\r\n    param (\r\n        [string]$Prompt,\r\n        [string]$ApiKey,\r\n        [string]$BaseUrl,\r\n        [string]$Model = \"o3-mini\"\r\n    )\r\n\r\n    # No manual escaping is needed when using ConvertTo-Json,\r\n    # just trim the prompt to remove any leading or trailing whitespace.\r\n    $Prompt = ConvertTo-Json $Prompt.Trim()\r\n\r\n\r\n    # Define the request payload\r\n    $Body = @{\r\n        messages = @(\r\n            @{ role = \"system\"; content = \"\" },\r\n            @{ role = \"user\"; content = $Prompt }\r\n        )\r\n        model = $Model\r\n    } | ConvertTo-Json -Depth 10\r\n\r\n    # Define headers\r\n    $Headers = @{\r\n        \"Authorization\" = \"Bearer $ApiKey\"\r\n        \"Content-Type\" = \"application/json\"\r\n    }\r\n\r\n    # Make the API request\r\n    try {\r\n        $url = \"$BaseUrl/chat/completions\"\r\n        Write-Output \"Request URL: $url\"\r\n        $Response = Invoke-RestMethod -Uri $url  -Method Post -Headers $Headers -Body $Body\r\n\r\n        return $Response.choices[0].message.content\r\n    } catch {\r\n        Write-Error \"The sample encountered an error: $_\"\r\n        Write-Error \"with the following parameters:\"\r\n        Write-Error \"Prompt: $Prompt\"\r\n        Write-Error \"BaseUrl: $BaseUrl\"\r\n        throw\r\n    }\r\n}",
    "metadata": {
      "extension": "ps1",
      "type": "code",
      "path": "C:/repos/danielsiegl/powershellplayground/functions/Invoke-ChatCompletionps1"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_scripts_generateWorkdaysReportps1",
    "text": "# generateWorkdaysReport.ps1\r\n\r\n. ./Modules/workday.ps1\r\n\r\n$workdaysByMonth = Get-Content -Path \"data/workdaysByMonth.json\" | ConvertFrom-Json\r\n\r\n$output = \"| Month       | Workdays |\\n|-------------|----------|\\n\"\r\nforeach ($month in $workdaysByMonth) {\r\n    $output += \"| $($month.Month) | $($month.Count) |\\n\"\r\n}\r\n\r\n$output | Set-Content -Path \"output.md\"",
    "metadata": {
      "extension": "ps1",
      "type": "code",
      "path": "C:/repos/danielsiegl/powershellplayground/scripts/generateWorkdaysReportps1"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_scripts_Pathsps1",
    "text": "# Show-SortedPaths function\r\n# This script sorts the system PATH variable and displays it in color-coded format.\r\nfunction Show-SortedPath {\r\n    $paths = $env:Path -split ';'\r\n\r\n    $sortedPaths = $paths | Sort-Object\r\n\r\n    foreach ($path in $sortedPaths) {\r\n        switch -Regex ($path) {\r\n            '^C:\\\\Program Files' { Write-Host $path -ForegroundColor Blue; break }\r\n            '^C:\\\\Users' { Write-Host $path -ForegroundColor Yellow; break }\r\n            '^C:\\\\Windows' { Write-Host $path -ForegroundColor Green; break }\r\n            default { Write-Host $path -ForegroundColor White }\r\n        }\r\n    }\r\n}\r\n\r\n# Set-Path function\r\n# This function sets a new path variable to the specified path.\r\nfunction Set-Path {\r\n    [CmdletBinding(SupportsShouldProcess)]\r\n    param (\r\n        [string]$newPath\r\n    )\r\n\r\n    # Set a new path variable to the specified path\r\n    if ($PSCmdlet.ShouldProcess(\"Adding $newPath to PATH\")) {\r\n        if ($env:Path -notmatch [regex]::Escape($newPath)) {\r\n            $env:Path += \";$newPath\"\r\n        }\r\n    }\r\n}\r\n",
    "metadata": {
      "extension": "ps1",
      "type": "code",
      "path": "C:/repos/danielsiegl/powershellplayground/scripts/Pathsps1"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_scripts_pslintps1",
    "text": "\r\n# This script is used to lint PowerShell scripts using PSScriptAnalyzer.\r\n# It checks if PSScriptAnalyzer is installed, installs it if not, and then\r\n# runs the analysis on all PowerShell scripts in the current directory and\r\n\r\n# Check if PSScriptAnalyzer is installed, if not install it.\r\nif (-not (Get-Module -ListAvailable -Name PSScriptAnalyzer)) {\r\n    Set-PSRepository PSGallery -InstallationPolicy Trusted\r\n    Install-Module PSScriptAnalyzer -ErrorAction Stop\r\n}\r\n\r\n# Lint the PowerShell scripts.\r\nInvoke-ScriptAnalyzer -Path *.ps1 -Recurse -Outvariable issues\r\n\r\n$errors   = $issues.Where({$_.Severity -eq 'Error'})\r\n$warnings = $issues.Where({$_.Severity -eq 'Warning'})\r\nif ($errors) {\r\n    Write-Error \"There were $($errors.Count) errors and $($warnings.Count) warnings total.\"\r\n} else {\r\n    Write-Output \"There were $($errors.Count) errors and $($warnings.Count) warnings total.\"\r\n}\r\n\r\n# Convert the issues to a markdown table\r\n$markdownTable = @\"\r\n| Severity | Line | Message |\r\n|----------|------|---------|\r\n\"@\r\n\r\nforeach ($issue in $issues) {\r\n    $markdownTable += \"| $($issue.Severity) | $($issue.Line) | $($issue.Message) |`n\"\r\n\r\n}\r\n\r\n\r\n# Output the markdown table to the step summary\r\nWrite-Output $markdownTable\r\n\r\n# Fail the build if there are any errors in the script files\r\nif ($errors) {\r\n    Write-Error \"Errors found in script files.\"\r\n    exit 1\r\n} else {\r\n    Write-Output \"No errors found in script files.\"\r\n}",
    "metadata": {
      "extension": "ps1",
      "type": "code",
      "path": "C:/repos/danielsiegl/powershellplayground/scripts/pslintps1"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_tests_gitignore",
    "text": "/test_person.json\r\n",
    "metadata": {
      "extension": "gitignore",
      "type": "other",
      "path": "C:/repos/danielsiegl/powershellplayground/tests/gitignore"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_tests_bankholidaystestsps1",
    "text": "# Modules/bankholidays.Tests.ps1\r\n\r\nDescribe \"Get-RestDateFormat\" {\r\n    BeforeAll {\r\n         # Load the class definition\r\n        # strange handling is required so it works in both environments\r\n        # (VSCode and GitHub Actions)\r\n        $paths = @(\r\n            \"$PSScriptRoot/functions\\bankholidays.ps1\",\r\n            \"$PSScriptRoot/../functions\\bankholidays.ps1\"\r\n        )\r\n\r\n        $foundPath = $paths | Where-Object { Test-Path $_ } | Select-Object -First 1\r\n\r\n        if ($foundPath) {\r\n            . $foundPath\r\n        }\r\n        else {\r\n            throw \"File not found: $($paths -join ', ')\"\r\n        }\r\n    }\r\n    It \"should return the correct date format\" {\r\n        $result = Get-RestDateFormat\r\n        $result | Should -Be \"yyyy-MM-dd\"\r\n    }\r\n}\r\n\r\nDescribe \"Get-AustrianBankHolidays\" {\r\n    BeforeAll {\r\n        . \"$PSScriptRoot\\..\\functions\\bankholidays.ps1\"\r\n    }\r\n    Context \"When called with valid dates\" {\r\n        It \"Should return an array of holiday objects\" {\r\n            $result = Get-AustrianBankHolidays -StartDate \"2023-01-01\" -EndDate \"2023-12-31\"\r\n            $result.Count | Should -Be 15\r\n        }\r\n    }\r\n\r\n    Context \"When API call fails\" {\r\n        It \"Should write an error message and return nothing\" {\r\n            { Get-AustrianBankHolidays -StartDate \"XXX\" -EndDate \"2023-12-31\" } | Should -Throw\r\n        }\r\n    }\r\n}",
    "metadata": {
      "extension": "ps1",
      "type": "code",
      "path": "C:/repos/danielsiegl/powershellplayground/tests/bankholidaystestsps1"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_tests_contractTestsps1",
    "text": "# classes/contract.Tests.ps1\r\n\r\nDescribe 'Contract Class' {\r\n    BeforeAll {\r\n        # Load the class definition\r\n        # strange handling is required so it works in both environments\r\n        # (VSCode and GitHub Actions)\r\n        $paths = @(\r\n            \"$PSScriptRoot/classes/contract.ps1\",\r\n            \"$PSScriptRoot/../classes/contract.ps1\"\r\n        )\r\n\r\n        $foundPath = $paths | Where-Object { Test-Path $_ } | Select-Object -First 1\r\n\r\n        if ($foundPath) {\r\n            . $foundPath\r\n        }\r\n        else {\r\n            throw \"File not found: $($paths -join ', ')\"\r\n        }\r\n    }\r\n\r\n    Context 'Constructor' {\r\n        It 'should create an instance of Contract with correct properties' {\r\n            $schedule = @{\r\n                Monday = @{ Start = \"08:00 AM\"; End = \"04:00 PM\" }\r\n                Tuesday = @{ Start = \"08:00 AM\"; End = \"04:00 PM\" }\r\n            }\r\n            $contract = [Contract]::new(\"John\", \"Doe\", \"2023\", 20.0, 5.0, 25.0, 10.0, $schedule)\r\n            $contract | Should -Not -BeNull\r\n            $contract.FirstName | Should -Be \"John\"\r\n            $contract.LastName | Should -Be \"Doe\"\r\n            $contract.Year | Should -Be \"2023\"\r\n            $contract.MorningCostPerHour | Should -Be 20.0\r\n            $contract.MorningGovSubsidyPerHour | Should -Be 5.0\r\n            $contract.AfternoonCostPerHour | Should -Be 25.0\r\n            $contract.AfternoonGovSubsidyPerHour | Should -Be 10.0\r\n            $contract.Schedule | Should -Be $schedule\r\n        }\r\n    }\r\n\r\n    Context 'Calculate Method' {\r\n        It 'should calculate monthly costs correctly' {\r\n            $schedule = @{\r\n                Monday = @{ Start = \"08:00 AM\"; End = \"04:00 PM\" }\r\n                Tuesday = @{ Start = \"08:00 AM\"; End = \"04:00 PM\" }\r\n            }\r\n            $contract = [Contract]::new(\"John\", \"Doe\", \"2023\", 20.0, 5.0, 25.0, 10.0, $schedule)\r\n            $monthlyCosts = $contract.Calculate()\r\n            $monthlyCosts | Should -Not -BeNull\r\n            $monthlyCosts.Count | Should -BeGreaterThan 0\r\n        }\r\n    }\r\n\r\n    Context 'LoadFromFile Method' {\r\n        It 'should load contract from file correctly' {\r\n\r\n            # attention case sensitive on linux runner\r\n            $paths = @(\r\n                \"$PSScriptRoot/config/contract.json\",\r\n                \"$PSScriptRoot/../config/contract.json\",\r\n                \"$PSScriptRoot/config/Contract.json\",\r\n                \"$PSScriptRoot/../config/Contract.json\"\r\n            )\r\n\r\n            $foundPath = $paths | Where-Object { Test-Path $_ } | Select-Object -First 1\r\n\r\n            if ($foundPath) {\r\n                $filePath = $foundPath\r\n                Write-Output \"File found: $filePath\"\r\n            }\r\n            else {\r\n                throw \"File not found: $($paths -join ', ')\"\r\n            }\r\n\r\n            # $filePath = \"$PSScriptRoot/config/contract.json\"\r\n            $contract = [Contract]::LoadFromFile($filePath)\r\n            $contract | Should -Not -BeNull\r\n            $contract.FirstName | Should -Be \"Daniel\"\r\n            $contract.LastName | Should -Be \"Testuser\"\r\n            $contract.Year | Should -Be \"2025\"\r\n        }\r\n    }\r\n}",
    "metadata": {
      "extension": "ps1",
      "type": "code",
      "path": "C:/repos/danielsiegl/powershellplayground/tests/contractTestsps1"
    }
  },
  {
    "id": "file_C:_repos_danielsiegl_powershellplayground_tests_holidayTestsps1",
    "text": "# classes/holiday.Tests.ps1\r\n\r\nDescribe 'HoliDay Class' {\r\n    BeforeAll {\r\n        # Load the class definition\r\n        # strange handling is required so it works in both environments\r\n        # (VSCode and GitHub Actions)\r\n        $paths = @(\r\n            \"$PSScriptRoot/classes/holiday.ps1\",\r\n            \"$PSScriptRoot/../classes/holiday.ps1\"\r\n        )\r\n\r\n        $foundPath = $paths | Where-Object { Test-Path $_ } | Select-Object -First 1\r\n\r\n        if ($foundPath) {\r\n            . $foundPath\r\n        }\r\n        else {\r\n            throw \"File not found: $($paths -join ', ')\"\r\n        }\r\n    }\r\n    Context 'Constructor' {\r\n        It 'should create an instance of HoliDay with correct properties' {\r\n            $date = Get-Date -Year 2021 -Month 1 -Day 1\r\n            $name = \"New Year's Day\"\r\n            $holiday = [HoliDay]::new($date, $name)\r\n            $holiday | Should -Not -BeNull\r\n            $holiday.Date | Should -Be $date\r\n            $holiday.Name | Should -Be $name\r\n        }\r\n    }\r\n\r\n    Context 'Properties' {\r\n        It 'should allow getting and setting Date property' {\r\n            $holiday = [HoliDay]::new((Get-Date), \"Test Holiday\")\r\n            $newDate = Get-Date -Year 2022 -Month 12 -Day 25\r\n            $holiday.Date = $newDate\r\n\r\n            $holiday.Date | Should -Be $newDate\r\n        }\r\n\r\n        It 'should allow getting and setting Name property' {\r\n            $holiday = [HoliDay]::new((Get-Date), \"Test Holiday\")\r\n            $newName = \"Christmas\"\r\n            $holiday.Name = $newName\r\n\r\n            $holiday.Name | Should -Be $newName\r\n        }\r\n    }\r\n}",
    "metadata": {
      "extension": "ps1",
      "type": "code",
      "path": "C:/repos/danielsiegl/powershellplayground/tests/holidayTestsps1"
    }
  }
]
